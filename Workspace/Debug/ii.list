
ii.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000716c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007460  08007460  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007468  08007468  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e14  20000074  080074e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e88  080074e4  00021e88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f387  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bdb  00000000  00000000  0003f42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00043008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  00044820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047fe  00000000  00000000  00045ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019618  00000000  00000000  0004a6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d617b  00000000  00000000  00063ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139e61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068bc  00000000  00000000  00139eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072e4 	.word	0x080072e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080072e4 	.word	0x080072e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <traffic_lights_on>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void traffic_lights_on(int rounds)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	switch (rounds % 4) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	425a      	negs	r2, r3
 8000574:	f003 0303 	and.w	r3, r3, #3
 8000578:	f002 0203 	and.w	r2, r2, #3
 800057c:	bf58      	it	pl
 800057e:	4253      	negpl	r3, r2
 8000580:	2b03      	cmp	r3, #3
 8000582:	d838      	bhi.n	80005f6 <traffic_lights_on+0x8e>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <traffic_lights_on+0x24>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	0800059d 	.word	0x0800059d
 8000590:	080005bb 	.word	0x080005bb
 8000594:	080005d9 	.word	0x080005d9
 8000598:	080005bb 	.word	0x080005bb
	case 0:
		HAL_GPIO_WritePin(GPIOB, Red_Pin | Yellow_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	21c0      	movs	r1, #192	; 0xc0
 80005a0:	4817      	ldr	r0, [pc, #92]	; (8000600 <traffic_lights_on+0x98>)
 80005a2:	f000 ffb9 	bl	8001518 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Green_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2101      	movs	r1, #1
 80005aa:	4815      	ldr	r0, [pc, #84]	; (8000600 <traffic_lights_on+0x98>)
 80005ac:	f000 ffb4 	bl	8001518 <HAL_GPIO_WritePin>
		HAL_Delay(GREEN_ON_TIME);
 80005b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005b4:	f000 fcc0 	bl	8000f38 <HAL_Delay>
		break;
 80005b8:	e01d      	b.n	80005f6 <traffic_lights_on+0x8e>
	case 1:
	case 3:
		HAL_GPIO_WritePin(GPIOB, Red_Pin | Green_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2141      	movs	r1, #65	; 0x41
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <traffic_lights_on+0x98>)
 80005c0:	f000 ffaa 	bl	8001518 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Yellow_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <traffic_lights_on+0x98>)
 80005ca:	f000 ffa5 	bl	8001518 <HAL_GPIO_WritePin>
		HAL_Delay(YELLOW_ON_TIME);
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f000 fcb1 	bl	8000f38 <HAL_Delay>
		break;
 80005d6:	e00e      	b.n	80005f6 <traffic_lights_on+0x8e>
	case 2:
		HAL_GPIO_WritePin(GPIOB, Yellow_Pin | Green_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2181      	movs	r1, #129	; 0x81
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <traffic_lights_on+0x98>)
 80005de:	f000 ff9b 	bl	8001518 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Red_Pin, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2140      	movs	r1, #64	; 0x40
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <traffic_lights_on+0x98>)
 80005e8:	f000 ff96 	bl	8001518 <HAL_GPIO_WritePin>
		HAL_Delay(RED_ON_TIME);
 80005ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005f0:	f000 fca2 	bl	8000f38 <HAL_Delay>
		break;
 80005f4:	bf00      	nop
	}
	//rounds++;
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	48000400 	.word	0x48000400

08000604 <AT_SEND_RECEIVE>:

void AT_SEND_RECEIVE( UART_HandleTypeDef *huart1)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	mode = 1;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <AT_SEND_RECEIVE+0x40>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
	snprintf(AT, AT_BUFFER, "AT\r\n");
 8000612:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <AT_SEND_RECEIVE+0x44>)
 8000614:	2114      	movs	r1, #20
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <AT_SEND_RECEIVE+0x48>)
 8000618:	f006 fa30 	bl	8006a7c <sniprintf>
	HAL_UART_Transmit(&*huart1, (uint8_t*) AT, AT_BUFFER, TRANSMIT_DELAY);
 800061c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000620:	2214      	movs	r2, #20
 8000622:	490a      	ldr	r1, [pc, #40]	; (800064c <AT_SEND_RECEIVE+0x48>)
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f002 fc1f 	bl	8002e68 <HAL_UART_Transmit>
	HAL_Delay(TRANSMIT_DELAY);
 800062a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800062e:	f000 fc83 	bl	8000f38 <HAL_Delay>
	HAL_UART_Receive_IT(&*huart1, OK_AT, OK_BUFFER);
 8000632:	22c8      	movs	r2, #200	; 0xc8
 8000634:	4906      	ldr	r1, [pc, #24]	; (8000650 <AT_SEND_RECEIVE+0x4c>)
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f002 fcaa 	bl	8002f90 <HAL_UART_Receive_IT>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200003b4 	.word	0x200003b4
 8000648:	08007324 	.word	0x08007324
 800064c:	20001ca8 	.word	0x20001ca8
 8000650:	20000090 	.word	0x20000090

08000654 <AT_CMGF_SEND_RECEIVE>:

void AT_CMGF_SEND_RECEIVE(UART_HandleTypeDef *huart1)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	mode = 2;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <AT_CMGF_SEND_RECEIVE+0x40>)
 800065e:	2202      	movs	r2, #2
 8000660:	601a      	str	r2, [r3, #0]
	snprintf(AT_CMGF, AT_CMGF_BUFFER, "AT+CMGF=1\r\n");
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <AT_CMGF_SEND_RECEIVE+0x44>)
 8000664:	2114      	movs	r1, #20
 8000666:	480d      	ldr	r0, [pc, #52]	; (800069c <AT_CMGF_SEND_RECEIVE+0x48>)
 8000668:	f006 fa08 	bl	8006a7c <sniprintf>
	HAL_UART_Transmit(&*huart1, (uint8_t*) AT_CMGF, AT_CMGF_BUFFER,
 800066c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000670:	2214      	movs	r2, #20
 8000672:	490a      	ldr	r1, [pc, #40]	; (800069c <AT_CMGF_SEND_RECEIVE+0x48>)
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f002 fbf7 	bl	8002e68 <HAL_UART_Transmit>
			TRANSMIT_DELAY);
	HAL_Delay(2 * TRANSMIT_DELAY);
 800067a:	f241 7070 	movw	r0, #6000	; 0x1770
 800067e:	f000 fc5b 	bl	8000f38 <HAL_Delay>
	HAL_UART_Receive_IT(&*huart1, OK_AT_CMGF, OK_BUFFER);
 8000682:	22c8      	movs	r2, #200	; 0xc8
 8000684:	4906      	ldr	r1, [pc, #24]	; (80006a0 <AT_CMGF_SEND_RECEIVE+0x4c>)
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f002 fc82 	bl	8002f90 <HAL_UART_Receive_IT>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200003b4 	.word	0x200003b4
 8000698:	0800732c 	.word	0x0800732c
 800069c:	20001c90 	.word	0x20001c90
 80006a0:	20000158 	.word	0x20000158

080006a4 <AT_CNMI_SEND_RECEIVE>:

void AT_CNMI_SEND_RECEIVE(UART_HandleTypeDef *huart1)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	mode = 3;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <AT_CNMI_SEND_RECEIVE+0x4c>)
 80006ae:	2203      	movs	r2, #3
 80006b0:	601a      	str	r2, [r3, #0]
	snprintf(AT_CNMI, AT_CNMI_BUFFER, "AT+CNMI=2,2,0,0,0\r\n");
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <AT_CNMI_SEND_RECEIVE+0x50>)
 80006b4:	211e      	movs	r1, #30
 80006b6:	4810      	ldr	r0, [pc, #64]	; (80006f8 <AT_CNMI_SEND_RECEIVE+0x54>)
 80006b8:	f006 f9e0 	bl	8006a7c <sniprintf>
	HAL_UART_Transmit(&*huart1, (uint8_t*) AT_CNMI, MESSAGE_BUFFER,
 80006bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006c0:	22c8      	movs	r2, #200	; 0xc8
 80006c2:	490d      	ldr	r1, [pc, #52]	; (80006f8 <AT_CNMI_SEND_RECEIVE+0x54>)
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f002 fbcf 	bl	8002e68 <HAL_UART_Transmit>
			TRANSMIT_DELAY);
	HAL_Delay(2 * TRANSMIT_DELAY);
 80006ca:	f241 7070 	movw	r0, #6000	; 0x1770
 80006ce:	f000 fc33 	bl	8000f38 <HAL_Delay>
	HAL_UART_Receive_IT(&*huart1, message_1, MESSAGE_BUFFER);
 80006d2:	22c8      	movs	r2, #200	; 0xc8
 80006d4:	4909      	ldr	r1, [pc, #36]	; (80006fc <AT_CNMI_SEND_RECEIVE+0x58>)
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f002 fc5a 	bl	8002f90 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&*huart1, message_2, MESSAGE_BUFFER);
 80006dc:	22c8      	movs	r2, #200	; 0xc8
 80006de:	4908      	ldr	r1, [pc, #32]	; (8000700 <AT_CNMI_SEND_RECEIVE+0x5c>)
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f002 fc55 	bl	8002f90 <HAL_UART_Receive_IT>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200003b4 	.word	0x200003b4
 80006f4:	08007338 	.word	0x08007338
 80006f8:	20001cbc 	.word	0x20001cbc
 80006fc:	20000220 	.word	0x20000220
 8000700:	200002e8 	.word	0x200002e8

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fbdd 	bl	8000ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f836 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f8f6 	bl	8000900 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000714:	f000 f894 	bl	8000840 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000718:	f000 f8c2 	bl	80008a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800071c:	f003 fc1e 	bl	8003f5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <main+0x54>)
 8000722:	2100      	movs	r1, #0
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <main+0x58>)
 8000726:	f003 fc63 	bl	8003ff0 <osThreadNew>
 800072a:	4603      	mov	r3, r0
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <main+0x5c>)
 800072e:	6013      	str	r3, [r2, #0]

  /* creation of TrafficLights */
  TrafficLightsHandle = osThreadNew(StartTask02, NULL, &TrafficLights_attributes);
 8000730:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <main+0x60>)
 8000732:	2100      	movs	r1, #0
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x64>)
 8000736:	f003 fc5b 	bl	8003ff0 <osThreadNew>
 800073a:	4603      	mov	r3, r0
 800073c:	4a0b      	ldr	r2, [pc, #44]	; (800076c <main+0x68>)
 800073e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(Answer, NULL, &myTask03_attributes);
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <main+0x6c>)
 8000742:	2100      	movs	r1, #0
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <main+0x70>)
 8000746:	f003 fc53 	bl	8003ff0 <osThreadNew>
 800074a:	4603      	mov	r3, r0
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <main+0x74>)
 800074e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000750:	f003 fc28 	bl	8003fa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x50>
 8000756:	bf00      	nop
 8000758:	08007378 	.word	0x08007378
 800075c:	08000a59 	.word	0x08000a59
 8000760:	20001c8c 	.word	0x20001c8c
 8000764:	0800739c 	.word	0x0800739c
 8000768:	08000aa1 	.word	0x08000aa1
 800076c:	20001ca4 	.word	0x20001ca4
 8000770:	080073c0 	.word	0x080073c0
 8000774:	08000ab1 	.word	0x08000ab1
 8000778:	20001d60 	.word	0x20001d60

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	; 0x58
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2244      	movs	r2, #68	; 0x44
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f006 f96e 	bl	8006a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800079e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a2:	f000 feef 	bl	8001584 <HAL_PWREx_ControlVoltageScaling>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ac:	f000 f99a 	bl	8000ae4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f000 feca 	bl	8001548 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <SystemClock_Config+0xc0>)
 80007b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <SystemClock_Config+0xc0>)
 80007bc:	f023 0318 	bic.w	r3, r3, #24
 80007c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007c4:	2314      	movs	r3, #20
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007dc:	2301      	movs	r3, #1
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007e4:	2328      	movs	r3, #40	; 0x28
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 ff19 	bl	8001630 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000804:	f000 f96e 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2303      	movs	r3, #3
 800080e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	2104      	movs	r1, #4
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fb25 	bl	8001e70 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800082c:	f000 f95a 	bl	8000ae4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000830:	f001 ff4a 	bl	80026c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000834:	bf00      	nop
 8000836:	3758      	adds	r7, #88	; 0x58
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000

08000840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_USART1_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART1_UART_Init+0x58>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART1_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART1_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000884:	f002 faa2 	bl	8002dcc <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 f929 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20001cdc 	.word	0x20001cdc
 800089c:	40013800 	.word	0x40013800

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008a6:	4a15      	ldr	r2, [pc, #84]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008e4:	f002 fa72 	bl	8002dcc <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ee:	f000 f8f9 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20001d64 	.word	0x20001d64
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_GPIO_Init+0xbc>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a28      	ldr	r2, [pc, #160]	; (80009bc <MX_GPIO_Init+0xbc>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0xbc>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_GPIO_Init+0xbc>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <MX_GPIO_Init+0xbc>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_GPIO_Init+0xbc>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_GPIO_Init+0xbc>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <MX_GPIO_Init+0xbc>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_GPIO_Init+0xbc>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_Pin|Red_Pin|Yellow_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	21c1      	movs	r1, #193	; 0xc1
 8000962:	4817      	ldr	r0, [pc, #92]	; (80009c0 <MX_GPIO_Init+0xc0>)
 8000964:	f000 fdd8 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flag_GPIO_Port, Flag_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f000 fdd1 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_Pin Red_Pin Yellow_Pin */
  GPIO_InitStruct.Pin = Green_Pin|Red_Pin|Yellow_Pin;
 8000976:	23c1      	movs	r3, #193	; 0xc1
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_GPIO_Init+0xc0>)
 800098e:	f000 fc59 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flag_Pin */
  GPIO_InitStruct.Pin = Flag_Pin;
 8000992:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Flag_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f000 fc49 	bl	8001244 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	48000400 	.word	0x48000400

080009c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_UART_RxCpltCallback+0x74>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d124      	bne.n	8000a20 <HAL_UART_RxCpltCallback+0x5c>
  {
	  switch(mode)
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_UART_RxCpltCallback+0x78>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d002      	beq.n	80009e4 <HAL_UART_RxCpltCallback+0x20>
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d00b      	beq.n	80009fa <HAL_UART_RxCpltCallback+0x36>
 80009e2:	e015      	b.n	8000a10 <HAL_UART_RxCpltCallback+0x4c>
	  {
	  case 1:
		  if( OK_AT == "OK")
 80009e4:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <HAL_UART_RxCpltCallback+0x7c>)
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_UART_RxCpltCallback+0x80>)
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d11b      	bne.n	8000a24 <HAL_UART_RxCpltCallback+0x60>
		  {
			  AT_CMGF_SEND_RECEIVE(&huart1);
 80009ec:	4816      	ldr	r0, [pc, #88]	; (8000a48 <HAL_UART_RxCpltCallback+0x84>)
 80009ee:	f7ff fe31 	bl	8000654 <AT_CMGF_SEND_RECEIVE>
			  mode = 2;
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_UART_RxCpltCallback+0x78>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	601a      	str	r2, [r3, #0]
		  }
	  	break;
 80009f8:	e014      	b.n	8000a24 <HAL_UART_RxCpltCallback+0x60>
	  case 2:
		  if( OK_AT_CMGF == "OK")
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <HAL_UART_RxCpltCallback+0x88>)
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_UART_RxCpltCallback+0x80>)
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d112      	bne.n	8000a28 <HAL_UART_RxCpltCallback+0x64>
		  {
			  AT_CNMI_SEND_RECEIVE(&huart1);
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <HAL_UART_RxCpltCallback+0x84>)
 8000a04:	f7ff fe4e 	bl	80006a4 <AT_CNMI_SEND_RECEIVE>
			  mode = 3;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_UART_RxCpltCallback+0x78>)
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8000a0e:	e00b      	b.n	8000a28 <HAL_UART_RxCpltCallback+0x64>
	  case 3:
	  default:
		  if( message_2 == "pass")
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <HAL_UART_RxCpltCallback+0x8c>)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_UART_RxCpltCallback+0x90>)
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d109      	bne.n	8000a2c <HAL_UART_RxCpltCallback+0x68>
		  {
			  AT_CNMI_SEND_RECEIVE(&huart1);
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_UART_RxCpltCallback+0x84>)
 8000a1a:	f7ff fe43 	bl	80006a4 <AT_CNMI_SEND_RECEIVE>
		  }
		  break;
 8000a1e:	e005      	b.n	8000a2c <HAL_UART_RxCpltCallback+0x68>
//    /* Transmit one byte with 100 ms timeout */
//    HAL_UART_Transmit(&huart1, &byte, 1, 100);
//
//    /* Receive one byte in interrupt mode */
//    HAL_UART_Receive_IT(&huart1, &byte, 1);
  }
 8000a20:	bf00      	nop
 8000a22:	e004      	b.n	8000a2e <HAL_UART_RxCpltCallback+0x6a>
	  	break;
 8000a24:	bf00      	nop
 8000a26:	e002      	b.n	8000a2e <HAL_UART_RxCpltCallback+0x6a>
		  break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <HAL_UART_RxCpltCallback+0x6a>
		  break;
 8000a2c:	bf00      	nop
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40013800 	.word	0x40013800
 8000a3c:	200003b4 	.word	0x200003b4
 8000a40:	20000090 	.word	0x20000090
 8000a44:	0800734c 	.word	0x0800734c
 8000a48:	20001cdc 	.word	0x20001cdc
 8000a4c:	20000158 	.word	0x20000158
 8000a50:	200002e8 	.word	0x200002e8
 8000a54:	08007350 	.word	0x08007350

08000a58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	traffic_lights_on(rounds);
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <StartDefaultTask+0x38>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fd7f 	bl	8000568 <traffic_lights_on>
	rounds++;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <StartDefaultTask+0x38>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <StartDefaultTask+0x38>)
 8000a72:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, "Test ", 6, 200);
 8000a74:	23c8      	movs	r3, #200	; 0xc8
 8000a76:	2206      	movs	r2, #6
 8000a78:	4906      	ldr	r1, [pc, #24]	; (8000a94 <StartDefaultTask+0x3c>)
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <StartDefaultTask+0x40>)
 8000a7c:	f002 f9f4 	bl	8002e68 <HAL_UART_Transmit>
	AT_SEND_RECEIVE(&huart1);
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <StartDefaultTask+0x44>)
 8000a82:	f7ff fdbf 	bl	8000604 <AT_SEND_RECEIVE>
//	HAL_UART_

    osDelay(1);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f003 fb44 	bl	8004114 <osDelay>
	traffic_lights_on(rounds);
 8000a8c:	e7e8      	b.n	8000a60 <StartDefaultTask+0x8>
 8000a8e:	bf00      	nop
 8000a90:	200003b0 	.word	0x200003b0
 8000a94:	08007358 	.word	0x08007358
 8000a98:	20001d64 	.word	0x20001d64
 8000a9c:	20001cdc 	.word	0x20001cdc

08000aa0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f003 fb33 	bl	8004114 <osDelay>
 8000aae:	e7fb      	b.n	8000aa8 <StartTask02+0x8>

08000ab0 <Answer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Answer */
void Answer(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Answer */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f003 fb2b 	bl	8004114 <osDelay>
 8000abe:	e7fb      	b.n	8000ab8 <Answer+0x8>

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f000 fa11 	bl	8000ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40012c00 	.word	0x40012c00

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_MspInit+0x4c>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6613      	str	r3, [r2, #96]	; 0x60
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	f06f 0001 	mvn.w	r0, #1
 8000b2e:	f000 fadf 	bl	80010f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0a0      	sub	sp, #128	; 0x80
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	2254      	movs	r2, #84	; 0x54
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f005 ff83 	bl	8006a6c <memset>
  if(huart->Instance==USART1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a46      	ldr	r2, [pc, #280]	; (8000c84 <HAL_UART_MspInit+0x144>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d140      	bne.n	8000bf2 <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fbaf 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b88:	f7ff ffac 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8c:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b90:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b96:	6613      	str	r3, [r2, #96]	; 0x60
 8000b98:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	4a37      	ldr	r2, [pc, #220]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bbc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f000 fb32 	bl	8001244 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2105      	movs	r1, #5
 8000be4:	2025      	movs	r0, #37	; 0x25
 8000be6:	f000 fa83 	bl	80010f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bea:	2025      	movs	r0, #37	; 0x25
 8000bec:	f000 fa9c 	bl	8001128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf0:	e043      	b.n	8000c7a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a25      	ldr	r2, [pc, #148]	; (8000c8c <HAL_UART_MspInit+0x14c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d13e      	bne.n	8000c7a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fb69 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000c14:	f7ff ff66 	bl	8000ae4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1c:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c22:	6593      	str	r3, [r2, #88]	; 0x58
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_UART_MspInit+0x148>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c48:	230c      	movs	r3, #12
 8000c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f000 faed 	bl	8001244 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	2026      	movs	r0, #38	; 0x26
 8000c70:	f000 fa3e 	bl	80010f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c74:	2026      	movs	r0, #38	; 0x26
 8000c76:	f000 fa57 	bl	8001128 <HAL_NVIC_EnableIRQ>
}
 8000c7a:	bf00      	nop
 8000c7c:	3780      	adds	r7, #128	; 0x80
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40013800 	.word	0x40013800
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40004400 	.word	0x40004400

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	2019      	movs	r0, #25
 8000ca6:	f000 fa23 	bl	80010f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000caa:	2019      	movs	r0, #25
 8000cac:	f000 fa3c 	bl	8001128 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_InitTick+0x9c>)
 8000cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <HAL_InitTick+0x9c>)
 8000cb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cba:	6613      	str	r3, [r2, #96]	; 0x60
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_InitTick+0x9c>)
 8000cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc8:	f107 0210 	add.w	r2, r7, #16
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fa72 	bl	80021bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cd8:	f001 fa5a 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8000cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <HAL_InitTick+0xa0>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9b      	lsrs	r3, r3, #18
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_InitTick+0xa8>)
 8000cf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_InitTick+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_InitTick+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <HAL_InitTick+0xa4>)
 8000d0e:	f001 fddd 	bl	80028cc <HAL_TIM_Base_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d104      	bne.n	8000d22 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <HAL_InitTick+0xa4>)
 8000d1a:	f001 fe39 	bl	8002990 <HAL_TIM_Base_Start_IT>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3730      	adds	r7, #48	; 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	431bde83 	.word	0x431bde83
 8000d34:	20001de8 	.word	0x20001de8
 8000d38:	40012c00 	.word	0x40012c00

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d6e:	f001 fe63 	bl	8002a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20001de8 	.word	0x20001de8

08000d7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <USART1_IRQHandler+0x10>)
 8000d82:	f002 f949 	bl	8003018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20001cdc 	.word	0x20001cdc

08000d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <USART2_IRQHandler+0x10>)
 8000d96:	f002 f93f 	bl	8003018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20001d64 	.word	0x20001d64

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f005 fe12 	bl	80069fc <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20010000 	.word	0x20010000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	200003b8 	.word	0x200003b8
 8000e0c:	20001e88 	.word	0x20001e88

08000e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <SystemInit+0x5c>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <SystemInit+0x5c>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <SystemInit+0x60>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <SystemInit+0x60>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <SystemInit+0x60>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <SystemInit+0x60>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <SystemInit+0x60>)
 8000e3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <SystemInit+0x60>)
 8000e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <SystemInit+0x60>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <SystemInit+0x60>)
 8000e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SystemInit+0x60>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00
 8000e70:	40021000 	.word	0x40021000

08000e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e78:	f7ff ffca 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e7e:	e003      	b.n	8000e88 <LoopCopyDataInit>

08000e80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e86:	3104      	adds	r1, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e88:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e90:	d3f6      	bcc.n	8000e80 <CopyDataInit>
	ldr	r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e94:	e002      	b.n	8000e9c <LoopFillZerobss>

08000e96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e98:	f842 3b04 	str.w	r3, [r2], #4

08000e9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <LoopForever+0x16>)
	cmp	r2, r3
 8000e9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ea0:	d3f9      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f005 fdb1 	bl	8006a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea6:	f7ff fc2d 	bl	8000704 <main>

08000eaa <LoopForever>:

LoopForever:
    b LoopForever
 8000eaa:	e7fe      	b.n	8000eaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eac:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000eb0:	08007470 	.word	0x08007470
	ldr	r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000eb8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000ebc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000ec0:	20001e88 	.word	0x20001e88

08000ec4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC1_IRQHandler>

08000ec6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f902 	bl	80010da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f7ff feda 	bl	8000c90 <HAL_InitTick>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	e001      	b.n	8000eec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee8:	f7ff fe02 	bl	8000af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20001e34 	.word	0x20001e34

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20001e34 	.word	0x20001e34

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff4c 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001102:	f7ff ff61 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 8001106:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	6978      	ldr	r0, [r7, #20]
 800110e:	f7ff ffb1 	bl	8001074 <NVIC_EncodePriority>
 8001112:	4602      	mov	r2, r0
 8001114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff80 	bl	8001020 <__NVIC_SetPriority>
}
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff54 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d008      	beq.n	800116e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2204      	movs	r2, #4
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e022      	b.n	80011b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 020e 	bic.w	r2, r2, #14
 800117c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f003 021c 	and.w	r2, r3, #28
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	2101      	movs	r1, #1
 800119c:	fa01 f202 	lsl.w	r2, r1, r2
 80011a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d005      	beq.n	80011e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2204      	movs	r2, #4
 80011dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	73fb      	strb	r3, [r7, #15]
 80011e2:	e029      	b.n	8001238 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 020e 	bic.w	r2, r2, #14
 80011f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	f003 021c 	and.w	r2, r3, #28
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	4798      	blx	r3
    }
  }
  return status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	e148      	b.n	80014e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2101      	movs	r1, #1
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	4013      	ands	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 813a 	beq.w	80014e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d00b      	beq.n	800128c <HAL_GPIO_Init+0x48>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d007      	beq.n	800128c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001280:	2b11      	cmp	r3, #17
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b12      	cmp	r3, #18
 800128a:	d130      	bne.n	80012ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c2:	2201      	movs	r2, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f003 0201 	and.w	r2, r3, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0xea>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b12      	cmp	r3, #18
 800132c:	d123      	bne.n	8001376 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	6939      	ldr	r1, [r7, #16]
 8001372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0203 	and.w	r2, r3, #3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8094 	beq.w	80014e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b8:	4b52      	ldr	r3, [pc, #328]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	4a51      	ldr	r2, [pc, #324]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6613      	str	r3, [r2, #96]	; 0x60
 80013c4:	4b4f      	ldr	r3, [pc, #316]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 80013c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d0:	4a4d      	ldr	r2, [pc, #308]	; (8001508 <HAL_GPIO_Init+0x2c4>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013fa:	d00d      	beq.n	8001418 <HAL_GPIO_Init+0x1d4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a43      	ldr	r2, [pc, #268]	; (800150c <HAL_GPIO_Init+0x2c8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d007      	beq.n	8001414 <HAL_GPIO_Init+0x1d0>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a42      	ldr	r2, [pc, #264]	; (8001510 <HAL_GPIO_Init+0x2cc>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_GPIO_Init+0x1cc>
 800140c:	2302      	movs	r3, #2
 800140e:	e004      	b.n	800141a <HAL_GPIO_Init+0x1d6>
 8001410:	2307      	movs	r3, #7
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x1d6>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_GPIO_Init+0x1d6>
 8001418:	2300      	movs	r3, #0
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	f002 0203 	and.w	r2, r2, #3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4093      	lsls	r3, r2
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800142a:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_GPIO_Init+0x2c4>)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800145c:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001486:	4a23      	ldr	r2, [pc, #140]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b0:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014da:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f aeaf 	bne.w	8001254 <HAL_GPIO_Init+0x10>
  }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	48000400 	.word	0x48000400
 8001510:	48000800 	.word	0x48000800
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001534:	e002      	b.n	800153c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40007000 	.word	0x40007000

08001568 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_PWREx_GetVoltageRange+0x18>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40007000 	.word	0x40007000

08001584 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001592:	d130      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800159c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a0:	d038      	beq.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2232      	movs	r2, #50	; 0x32
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	4a1b      	ldr	r2, [pc, #108]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0c9b      	lsrs	r3, r3, #18
 80015c4:	3301      	adds	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015c8:	e002      	b.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015dc:	d102      	bne.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f2      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f0:	d110      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e00f      	b.n	8001616 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001602:	d007      	beq.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001612:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40007000 	.word	0x40007000
 8001628:	20000000 	.word	0x20000000
 800162c:	431bde83 	.word	0x431bde83

08001630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	f000 bc11 	b.w	8001e66 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001644:	4ba0      	ldr	r3, [pc, #640]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800164e:	4b9e      	ldr	r3, [pc, #632]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80e4 	beq.w	800182e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_RCC_OscConfig+0x4c>
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	f040 808b 	bne.w	800178a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b01      	cmp	r3, #1
 8001678:	f040 8087 	bne.w	800178a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800167c:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_OscConfig+0x64>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e3e8      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1a      	ldr	r2, [r3, #32]
 8001698:	4b8b      	ldr	r3, [pc, #556]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <HAL_RCC_OscConfig+0x7e>
 80016a4:	4b88      	ldr	r3, [pc, #544]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ac:	e005      	b.n	80016ba <HAL_RCC_OscConfig+0x8a>
 80016ae:	4b86      	ldr	r3, [pc, #536]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80016b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d223      	bcs.n	8001706 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fdac 	bl	8002220 <RCC_SetFlashLatencyFromMSIRange>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e3c9      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d2:	4b7d      	ldr	r3, [pc, #500]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a7c      	ldr	r2, [pc, #496]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b7a      	ldr	r3, [pc, #488]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4977      	ldr	r1, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f0:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	4972      	ldr	r1, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e025      	b.n	8001752 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001706:	4b70      	ldr	r3, [pc, #448]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6f      	ldr	r2, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	496a      	ldr	r1, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	4965      	ldr	r1, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fd6c 	bl	8002220 <RCC_SetFlashLatencyFromMSIRange>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e389      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001752:	f000 fc6f 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001756:	4602      	mov	r2, r0
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	495a      	ldr	r1, [pc, #360]	; (80018cc <HAL_RCC_OscConfig+0x29c>)
 8001764:	5ccb      	ldrb	r3, [r1, r3]
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	fa22 f303 	lsr.w	r3, r2, r3
 800176e:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <HAL_RCC_OscConfig+0x2a0>)
 8001770:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001772:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <HAL_RCC_OscConfig+0x2a4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fa8a 	bl	8000c90 <HAL_InitTick>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d052      	beq.n	800182c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	e36d      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d032      	beq.n	80017f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001792:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a4c      	ldr	r2, [pc, #304]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800179e:	f7ff fbbf 	bl	8000f20 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a6:	f7ff fbbb 	bl	8000f20 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e356      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c4:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a3f      	ldr	r2, [pc, #252]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	493a      	ldr	r1, [pc, #232]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	4935      	ldr	r1, [pc, #212]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
 80017f6:	e01a      	b.n	800182e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017f8:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a32      	ldr	r2, [pc, #200]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001804:	f7ff fb8c 	bl	8000f20 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800180c:	f7ff fb88 	bl	8000f20 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e323      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x1dc>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d073      	beq.n	8001922 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d005      	beq.n	800184c <HAL_RCC_OscConfig+0x21c>
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d10e      	bne.n	8001864 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d10b      	bne.n	8001864 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d063      	beq.n	8001920 <HAL_RCC_OscConfig+0x2f0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d15f      	bne.n	8001920 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e300      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	d106      	bne.n	800187c <HAL_RCC_OscConfig+0x24c>
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e01d      	b.n	80018b8 <HAL_RCC_OscConfig+0x288>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x270>
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0x288>
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80018a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <HAL_RCC_OscConfig+0x298>)
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01b      	beq.n	80018f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fb2e 	bl	8000f20 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c6:	e010      	b.n	80018ea <HAL_RCC_OscConfig+0x2ba>
 80018c8:	40021000 	.word	0x40021000
 80018cc:	080073e4 	.word	0x080073e4
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fb22 	bl	8000f20 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e2bd      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ea:	4baf      	ldr	r3, [pc, #700]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x2a8>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb12 	bl	8000f20 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fb0e 	bl	8000f20 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e2a9      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001912:	4ba5      	ldr	r3, [pc, #660]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x2d0>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d060      	beq.n	80019f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d005      	beq.n	8001940 <HAL_RCC_OscConfig+0x310>
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d119      	bne.n	800196e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d116      	bne.n	800196e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001940:	4b99      	ldr	r3, [pc, #612]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_OscConfig+0x328>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e286      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b93      	ldr	r3, [pc, #588]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	4990      	ldr	r1, [pc, #576]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196c:	e040      	b.n	80019f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d023      	beq.n	80019be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001976:	4b8c      	ldr	r3, [pc, #560]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a8b      	ldr	r2, [pc, #556]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff facd 	bl	8000f20 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff fac9 	bl	8000f20 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e264      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800199c:	4b82      	ldr	r3, [pc, #520]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b7f      	ldr	r3, [pc, #508]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	497c      	ldr	r1, [pc, #496]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
 80019bc:	e018      	b.n	80019f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019be:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a79      	ldr	r2, [pc, #484]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 80019c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff faa9 	bl	8000f20 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff faa5 	bl	8000f20 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e240      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e4:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d03c      	beq.n	8001a76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01c      	beq.n	8001a3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a04:	4b68      	ldr	r3, [pc, #416]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0a:	4a67      	ldr	r2, [pc, #412]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff fa84 	bl	8000f20 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fa80 	bl	8000f20 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e21b      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ef      	beq.n	8001a1c <HAL_RCC_OscConfig+0x3ec>
 8001a3c:	e01b      	b.n	8001a76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a44:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fa67 	bl	8000f20 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff fa63 	bl	8000f20 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1fe      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a68:	4b4f      	ldr	r3, [pc, #316]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ef      	bne.n	8001a56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80a6 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a88:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10d      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa0:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aac:	2301      	movs	r3, #1
 8001aae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab0:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <HAL_RCC_OscConfig+0x57c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d118      	bne.n	8001aee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001abc:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <HAL_RCC_OscConfig+0x57c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a3a      	ldr	r2, [pc, #232]	; (8001bac <HAL_RCC_OscConfig+0x57c>)
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fa2a 	bl	8000f20 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad0:	f7ff fa26 	bl	8000f20 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1c1      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_RCC_OscConfig+0x57c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4d8>
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afc:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b06:	e024      	b.n	8001b52 <HAL_RCC_OscConfig+0x522>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d110      	bne.n	8001b32 <HAL_RCC_OscConfig+0x502>
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b30:	e00f      	b.n	8001b52 <HAL_RCC_OscConfig+0x522>
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b48:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001b4a:	f023 0304 	bic.w	r3, r3, #4
 8001b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f9e1 	bl	8000f20 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff f9dd 	bl	8000f20 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e176      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_RCC_OscConfig+0x578>)
 8001b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0ed      	beq.n	8001b62 <HAL_RCC_OscConfig+0x532>
 8001b86:	e01a      	b.n	8001bbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f9ca 	bl	8000f20 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8e:	e00f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff f9c6 	bl	8000f20 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d906      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e15f      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb0:	4baa      	ldr	r3, [pc, #680]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1e8      	bne.n	8001b90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc4:	4ba5      	ldr	r3, [pc, #660]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	4aa4      	ldr	r2, [pc, #656]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d03c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001be4:	4b9d      	ldr	r3, [pc, #628]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bea:	4a9c      	ldr	r2, [pc, #624]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f994 	bl	8000f20 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bfc:	f7ff f990 	bl	8000f20 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e12b      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c0e:	4b93      	ldr	r3, [pc, #588]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ef      	beq.n	8001bfc <HAL_RCC_OscConfig+0x5cc>
 8001c1c:	e01b      	b.n	8001c56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c1e:	4b8f      	ldr	r3, [pc, #572]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c24:	4a8d      	ldr	r2, [pc, #564]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f977 	bl	8000f20 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c36:	f7ff f973 	bl	8000f20 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e10e      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c48:	4b84      	ldr	r3, [pc, #528]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ef      	bne.n	8001c36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8102 	beq.w	8001e64 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 80c5 	bne.w	8001df4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c6a:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0203 	and.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d12c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d123      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d11b      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d113      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d109      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d067      	beq.n	8001da8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d062      	beq.n	8001da4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cde:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0bb      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cee:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5a      	ldr	r2, [pc, #360]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cfa:	f7ff f911 	bl	8000f20 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff f90d 	bl	8000f20 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0a8      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d20:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4b4e      	ldr	r3, [pc, #312]	; (8001e60 <HAL_RCC_OscConfig+0x830>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d30:	3a01      	subs	r2, #1
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	4311      	orrs	r1, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d3a:	0212      	lsls	r2, r2, #8
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d42:	0852      	lsrs	r2, r2, #1
 8001d44:	3a01      	subs	r2, #1
 8001d46:	0552      	lsls	r2, r2, #21
 8001d48:	4311      	orrs	r1, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d4e:	0852      	lsrs	r2, r2, #1
 8001d50:	3a01      	subs	r2, #1
 8001d52:	0652      	lsls	r2, r2, #25
 8001d54:	4311      	orrs	r1, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d5a:	06d2      	lsls	r2, r2, #27
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	493f      	ldr	r1, [pc, #252]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d64:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a3c      	ldr	r2, [pc, #240]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a39      	ldr	r2, [pc, #228]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d7c:	f7ff f8d0 	bl	8000f20 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff f8cc 	bl	8000f20 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e067      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d96:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da2:	e05f      	b.n	8001e64 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e05e      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d157      	bne.n	8001e64 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a28      	ldr	r2, [pc, #160]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc0:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dcc:	f7ff f8a8 	bl	8000f20 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff f8a4 	bl	8000f20 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e03f      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x7a4>
 8001df2:	e037      	b.n	8001e64 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d02d      	beq.n	8001e56 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001e00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e04:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001e18:	f023 0303 	bic.w	r3, r3, #3
 8001e1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001e24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff f877 	bl	8000f20 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e36:	f7ff f873 	bl	8000f20 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e00e      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_RCC_OscConfig+0x82c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x806>
 8001e54:	e006      	b.n	8001e64 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e005      	b.n	8001e66 <HAL_RCC_OscConfig+0x836>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop

08001e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0c8      	b.n	8002016 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b66      	ldr	r3, [pc, #408]	; (8002020 <HAL_RCC_ClockConfig+0x1b0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d910      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_ClockConfig+0x1b0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4961      	ldr	r1, [pc, #388]	; (8002020 <HAL_RCC_ClockConfig+0x1b0>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b5f      	ldr	r3, [pc, #380]	; (8002020 <HAL_RCC_ClockConfig+0x1b0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0b0      	b.n	8002016 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d04c      	beq.n	8001f5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec8:	4b56      	ldr	r3, [pc, #344]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d121      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e09e      	b.n	8002016 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d115      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e092      	b.n	8002016 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ef8:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d109      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e086      	b.n	8002016 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f08:	4b46      	ldr	r3, [pc, #280]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e07e      	b.n	8002016 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 0203 	bic.w	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	493f      	ldr	r1, [pc, #252]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f2a:	f7fe fff9 	bl	8000f20 <HAL_GetTick>
 8001f2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f32:	f7fe fff5 	bl	8000f20 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e066      	b.n	8002016 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 020c 	and.w	r2, r3, #12
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d1eb      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	492c      	ldr	r1, [pc, #176]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_RCC_ClockConfig+0x1b0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d210      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_RCC_ClockConfig+0x1b0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4924      	ldr	r1, [pc, #144]	; (8002020 <HAL_RCC_ClockConfig+0x1b0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_RCC_ClockConfig+0x1b0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e036      	b.n	8002016 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4918      	ldr	r1, [pc, #96]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4910      	ldr	r1, [pc, #64]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe6:	f000 f825 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	490c      	ldr	r1, [pc, #48]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	5ccb      	ldrb	r3, [r1, r3]
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fe40 	bl	8000c90 <HAL_InitTick>
 8002010:	4603      	mov	r3, r0
 8002012:	72fb      	strb	r3, [r7, #11]

  return status;
 8002014:	7afb      	ldrb	r3, [r7, #11]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40022000 	.word	0x40022000
 8002024:	40021000 	.word	0x40021000
 8002028:	080073e4 	.word	0x080073e4
 800202c:	20000000 	.word	0x20000000
 8002030:	20000004 	.word	0x20000004

08002034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <HAL_RCC_GetSysClockFreq+0x108>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_RCC_GetSysClockFreq+0x108>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x34>
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b0c      	cmp	r3, #12
 8002060:	d121      	bne.n	80020a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d11e      	bne.n	80020a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_RCC_GetSysClockFreq+0x108>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_RCC_GetSysClockFreq+0x108>)
 8002076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e005      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_GetSysClockFreq+0x108>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002090:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10d      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d102      	bne.n	80020b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	e004      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_RCC_GetSysClockFreq+0x114>)
 80020ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d134      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d003      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0xa6>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d003      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0xac>
 80020d8:	e005      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_RCC_GetSysClockFreq+0x110>)
 80020dc:	617b      	str	r3, [r7, #20]
      break;
 80020de:	e005      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_RCC_GetSysClockFreq+0x114>)
 80020e2:	617b      	str	r3, [r7, #20]
      break;
 80020e4:	e002      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	617b      	str	r3, [r7, #20]
      break;
 80020ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	3301      	adds	r3, #1
 80020f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_RCC_GetSysClockFreq+0x108>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	fb02 f203 	mul.w	r2, r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_GetSysClockFreq+0x108>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	0e5b      	lsrs	r3, r3, #25
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	3301      	adds	r3, #1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800212c:	69bb      	ldr	r3, [r7, #24]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	080073fc 	.word	0x080073fc
 8002144:	00f42400 	.word	0x00f42400
 8002148:	007a1200 	.word	0x007a1200

0800214c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_RCC_GetHCLKFreq+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000

08002164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002168:	f7ff fff0 	bl	800214c <HAL_RCC_GetHCLKFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4904      	ldr	r1, [pc, #16]	; (800218c <HAL_RCC_GetPCLK1Freq+0x28>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	080073f4 	.word	0x080073f4

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002194:	f7ff ffda 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0adb      	lsrs	r3, r3, #11
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4904      	ldr	r1, [pc, #16]	; (80021b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	080073f4 	.word	0x080073f4

080021bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	220f      	movs	r2, #15
 80021ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_RCC_GetClockConfig+0x5c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0203 	and.w	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_RCC_GetClockConfig+0x5c>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_RCC_GetClockConfig+0x5c>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_GetClockConfig+0x5c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_RCC_GetClockConfig+0x60>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0207 	and.w	r2, r3, #7
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	601a      	str	r2, [r3, #0]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	40022000 	.word	0x40022000

08002220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002238:	f7ff f996 	bl	8001568 <HAL_PWREx_GetVoltageRange>
 800223c:	6178      	str	r0, [r7, #20]
 800223e:	e014      	b.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002258:	f7ff f986 	bl	8001568 <HAL_PWREx_GetVoltageRange>
 800225c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002268:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d10b      	bne.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d919      	bls.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2ba0      	cmp	r3, #160	; 0xa0
 800227c:	d902      	bls.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800227e:	2302      	movs	r3, #2
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e013      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002284:	2301      	movs	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	e010      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d902      	bls.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002290:	2303      	movs	r3, #3
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e00a      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d102      	bne.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800229c:	2302      	movs	r3, #2
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e004      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b70      	cmp	r3, #112	; 0x70
 80022a6:	d101      	bne.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a8:	2301      	movs	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 0207 	bic.w	r2, r3, #7
 80022b4:	4909      	ldr	r1, [pc, #36]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40022000 	.word	0x40022000

080022e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022e8:	2300      	movs	r3, #0
 80022ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022ec:	2300      	movs	r3, #0
 80022ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d031      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002304:	d01a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002306:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800230a:	d814      	bhi.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002314:	d10f      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002316:	4bac      	ldr	r3, [pc, #688]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	4aab      	ldr	r2, [pc, #684]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002322:	e00c      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f9dc 	bl	80026e8 <RCCEx_PLLSAI1_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002334:	e003      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	74fb      	strb	r3, [r7, #19]
      break;
 800233a:	e000      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800233c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002344:	4ba0      	ldr	r3, [pc, #640]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	499d      	ldr	r1, [pc, #628]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800235a:	e001      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8099 	beq.w	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002372:	4b95      	ldr	r3, [pc, #596]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002382:	2300      	movs	r3, #0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	4a8e      	ldr	r2, [pc, #568]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002392:	6593      	str	r3, [r2, #88]	; 0x58
 8002394:	4b8c      	ldr	r3, [pc, #560]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a0:	2301      	movs	r3, #1
 80023a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a4:	4b89      	ldr	r3, [pc, #548]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a88      	ldr	r2, [pc, #544]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fdb6 	bl	8000f20 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023b6:	e009      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b8:	f7fe fdb2 	bl	8000f20 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d902      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	74fb      	strb	r3, [r7, #19]
        break;
 80023ca:	e005      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023cc:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ef      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d155      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023de:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01e      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d019      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023fa:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002404:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002406:	4b70      	ldr	r3, [pc, #448]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002416:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002426:	4a68      	ldr	r2, [pc, #416]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d016      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fd72 	bl	8000f20 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243e:	e00b      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe fd6e 	bl	8000f20 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d902      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	74fb      	strb	r3, [r7, #19]
            break;
 8002456:	e006      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002458:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ec      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800246c:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247a:	4953      	ldr	r1, [pc, #332]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002482:	e004      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	74bb      	strb	r3, [r7, #18]
 8002488:	e001      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248e:	7c7b      	ldrb	r3, [r7, #17]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	4a4b      	ldr	r2, [pc, #300]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ac:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4943      	ldr	r1, [pc, #268]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ce:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f023 020c 	bic.w	r2, r3, #12
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	493a      	ldr	r1, [pc, #232]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f0:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	4932      	ldr	r1, [pc, #200]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002520:	4929      	ldr	r1, [pc, #164]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	4921      	ldr	r1, [pc, #132]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	4918      	ldr	r1, [pc, #96]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4910      	ldr	r1, [pc, #64]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d02c      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b8:	d10a      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ba:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	4a02      	ldr	r2, [pc, #8]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c4:	60d3      	str	r3, [r2, #12]
 80025c6:	e015      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	2101      	movs	r1, #1
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f881 	bl	80026e8 <RCCEx_PLLSAI1_Config>
 80025e6:	4603      	mov	r3, r0
 80025e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025ea:	7cfb      	ldrb	r3, [r7, #19]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d028      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002600:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	492d      	ldr	r1, [pc, #180]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261e:	d106      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262a:	60d3      	str	r3, [r2, #12]
 800262c:	e011      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002636:	d10c      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	2101      	movs	r1, #1
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f852 	bl	80026e8 <RCCEx_PLLSAI1_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01c      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266c:	4915      	ldr	r1, [pc, #84]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800267c:	d10c      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	2102      	movs	r1, #2
 8002684:	4618      	mov	r0, r3
 8002686:	f000 f82f 	bl	80026e8 <RCCEx_PLLSAI1_Config>
 800268a:	4603      	mov	r3, r0
 800268c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026a4:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4904      	ldr	r1, [pc, #16]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000

080026e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026f6:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d018      	beq.n	8002734 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002702:	4b71      	ldr	r3, [pc, #452]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0203 	and.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d10d      	bne.n	800272e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
       ||
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800271a:	4b6b      	ldr	r3, [pc, #428]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
       ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d047      	beq.n	80027be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e044      	b.n	80027be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d018      	beq.n	800276e <RCCEx_PLLSAI1_Config+0x86>
 800273c:	2b03      	cmp	r3, #3
 800273e:	d825      	bhi.n	800278c <RCCEx_PLLSAI1_Config+0xa4>
 8002740:	2b01      	cmp	r3, #1
 8002742:	d002      	beq.n	800274a <RCCEx_PLLSAI1_Config+0x62>
 8002744:	2b02      	cmp	r3, #2
 8002746:	d009      	beq.n	800275c <RCCEx_PLLSAI1_Config+0x74>
 8002748:	e020      	b.n	800278c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800274a:	4b5f      	ldr	r3, [pc, #380]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11d      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275a:	e01a      	b.n	8002792 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800275c:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d116      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e013      	b.n	8002796 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800276e:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800278a:	e006      	b.n	800279a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      break;
 8002790:	e004      	b.n	800279c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800279a:	bf00      	nop
    }

    if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10d      	bne.n	80027be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	430b      	orrs	r3, r1
 80027b8:	4943      	ldr	r1, [pc, #268]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d17c      	bne.n	80028be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027c4:	4b40      	ldr	r3, [pc, #256]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a3f      	ldr	r2, [pc, #252]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe fba6 	bl	8000f20 <HAL_GetTick>
 80027d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027d6:	e009      	b.n	80027ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027d8:	f7fe fba2 	bl	8000f20 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d902      	bls.n	80027ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	73fb      	strb	r3, [r7, #15]
        break;
 80027ea:	e005      	b.n	80027f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ef      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d15f      	bne.n	80028be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d110      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800280c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6892      	ldr	r2, [r2, #8]
 8002814:	0211      	lsls	r1, r2, #8
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68d2      	ldr	r2, [r2, #12]
 800281a:	06d2      	lsls	r2, r2, #27
 800281c:	430a      	orrs	r2, r1
 800281e:	492a      	ldr	r1, [pc, #168]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	610b      	str	r3, [r1, #16]
 8002824:	e027      	b.n	8002876 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d112      	bne.n	8002852 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002834:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6892      	ldr	r2, [r2, #8]
 800283c:	0211      	lsls	r1, r2, #8
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6912      	ldr	r2, [r2, #16]
 8002842:	0852      	lsrs	r2, r2, #1
 8002844:	3a01      	subs	r2, #1
 8002846:	0552      	lsls	r2, r2, #21
 8002848:	430a      	orrs	r2, r1
 800284a:	491f      	ldr	r1, [pc, #124]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	610b      	str	r3, [r1, #16]
 8002850:	e011      	b.n	8002876 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800285a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6892      	ldr	r2, [r2, #8]
 8002862:	0211      	lsls	r1, r2, #8
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6952      	ldr	r2, [r2, #20]
 8002868:	0852      	lsrs	r2, r2, #1
 800286a:	3a01      	subs	r2, #1
 800286c:	0652      	lsls	r2, r2, #25
 800286e:	430a      	orrs	r2, r1
 8002870:	4915      	ldr	r1, [pc, #84]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002880:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe fb4d 	bl	8000f20 <HAL_GetTick>
 8002886:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002888:	e009      	b.n	800289e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800288a:	f7fe fb49 	bl	8000f20 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d902      	bls.n	800289e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	73fb      	strb	r3, [r7, #15]
          break;
 800289c:	e005      	b.n	80028aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ef      	beq.n	800288a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e049      	b.n	8002972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f841 	bl	800297a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3304      	adds	r3, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f000 f9dc 	bl	8002cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e03b      	b.n	8002a20 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIM_Base_Start_IT+0x9c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x4e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d004      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x4e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_TIM_Base_Start_IT+0xa0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d115      	bne.n	8002a0a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_TIM_Base_Start_IT+0xa4>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d015      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0x8c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f6:	d011      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	e008      	b.n	8002a1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e000      	b.n	8002a1e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40014000 	.word	0x40014000
 8002a34:	00010007 	.word	0x00010007

08002a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0202 	mvn.w	r2, #2
 8002a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f905 	bl	8002c8a <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8f7 	bl	8002c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f908 	bl	8002c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0204 	mvn.w	r2, #4
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8db 	bl	8002c8a <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8cd 	bl	8002c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8de 	bl	8002c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0208 	mvn.w	r2, #8
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2204      	movs	r2, #4
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f8b1 	bl	8002c8a <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8a3 	bl	8002c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f8b4 	bl	8002c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0210 	mvn.w	r2, #16
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2208      	movs	r2, #8
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f887 	bl	8002c8a <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f879 	bl	8002c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f88a 	bl	8002c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0201 	mvn.w	r2, #1
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd ff82 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8de 	bl	8002da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf6:	d10e      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d107      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8d1 	bl	8002db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d10e      	bne.n	8002c42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d107      	bne.n	8002c42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f838 	bl	8002cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d10e      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d107      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f06f 0220 	mvn.w	r2, #32
 8002c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f891 	bl	8002d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <TIM_Base_SetConfig+0xbc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_Base_SetConfig+0x20>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d108      	bne.n	8002cfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <TIM_Base_SetConfig+0xbc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <TIM_Base_SetConfig+0x52>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d007      	beq.n	8002d1a <TIM_Base_SetConfig+0x52>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1e      	ldr	r2, [pc, #120]	; (8002d88 <TIM_Base_SetConfig+0xc0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <TIM_Base_SetConfig+0x52>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <TIM_Base_SetConfig+0xc4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d108      	bne.n	8002d2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <TIM_Base_SetConfig+0xbc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d007      	beq.n	8002d68 <TIM_Base_SetConfig+0xa0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <TIM_Base_SetConfig+0xc0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_Base_SetConfig+0xa0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <TIM_Base_SetConfig+0xc4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	615a      	str	r2, [r3, #20]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400

08002d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e040      	b.n	8002e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fd fea6 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2224      	movs	r2, #36	; 0x24
 8002df8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fb26 	bl	800345c <UART_SetConfig>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e022      	b.n	8002e60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fd26 	bl	8003874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fdad 	bl	80039b8 <UART_CheckIdleState>
 8002e5e:	4603      	mov	r3, r0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	f040 8082 	bne.w	8002f86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_UART_Transmit+0x26>
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07a      	b.n	8002f88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_UART_Transmit+0x38>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e073      	b.n	8002f88 <HAL_UART_Transmit+0x120>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2221      	movs	r2, #33	; 0x21
 8002eb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb6:	f7fe f833 	bl	8000f20 <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d108      	bne.n	8002ee8 <HAL_UART_Transmit+0x80>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	e003      	b.n	8002ef0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ef8:	e02d      	b.n	8002f56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fda0 	bl	8003a4a <UART_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e039      	b.n	8002f88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10b      	bne.n	8002f32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f26:	b292      	uxth	r2, r2
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	e008      	b.n	8002f44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b292      	uxth	r2, r2
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1cb      	bne.n	8002efa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2140      	movs	r1, #64	; 0x40
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fd6c 	bl	8003a4a <UART_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e005      	b.n	8002f88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d131      	bne.n	800300a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_UART_Receive_IT+0x22>
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e02a      	b.n	800300c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Receive_IT+0x34>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e023      	b.n	800300c <HAL_UART_Receive_IT+0x7c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_UART_Receive_IT+0x84>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00e      	beq.n	8002ffa <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ff8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fd9f 	bl	8003b44 <UART_Start_Receive_IT>
 8003006:	4603      	mov	r3, r0
 8003008:	e000      	b.n	800300c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
  }
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40008000 	.word	0x40008000

08003018 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f640 030f 	movw	r3, #2063	; 0x80f
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d113      	bne.n	8003070 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00e      	beq.n	8003070 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 81ce 	beq.w	8003402 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
      }
      return;
 800306e:	e1c8      	b.n	8003402 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80e3 	beq.w	800323e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4ba6      	ldr	r3, [pc, #664]	; (8003320 <HAL_UART_IRQHandler+0x308>)
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80d8 	beq.w	800323e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <HAL_UART_IRQHandler+0xa2>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2201      	movs	r2, #1
 80030a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <HAL_UART_IRQHandler+0xce>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2202      	movs	r2, #2
 80030d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_UART_IRQHandler+0xfa>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2204      	movs	r2, #4
 8003100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003108:	f043 0202 	orr.w	r2, r3, #2
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d015      	beq.n	8003148 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2208      	movs	r2, #8
 8003136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313e:	f043 0208 	orr.w	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314e:	2b00      	cmp	r3, #0
 8003150:	d011      	beq.n	8003176 <HAL_UART_IRQHandler+0x15e>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00c      	beq.n	8003176 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8142 	beq.w	8003406 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00c      	beq.n	80031a6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d004      	beq.n	80031c6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d031      	beq.n	800322a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fd44 	bl	8003c54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d123      	bne.n	8003222 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d013      	beq.n	800321a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a4b      	ldr	r2, [pc, #300]	; (8003324 <HAL_UART_IRQHandler+0x30c>)
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd ffde 	bl	80011c0 <HAL_DMA_Abort_IT>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d017      	beq.n	800323a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003214:	4610      	mov	r0, r2
 8003216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003218:	e00f      	b.n	800323a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f908 	bl	8003430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e00b      	b.n	800323a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f904 	bl	8003430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	e007      	b.n	800323a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f900 	bl	8003430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003238:	e0e5      	b.n	8003406 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323a:	bf00      	nop
    return;
 800323c:	e0e3      	b.n	8003406 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 80a9 	bne.w	800339a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80a3 	beq.w	800339a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 809d 	beq.w	800339a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2210      	movs	r2, #16
 8003266:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d158      	bne.n	8003328 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003280:	893b      	ldrh	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80c1 	beq.w	800340a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800328e:	893a      	ldrh	r2, [r7, #8]
 8003290:	429a      	cmp	r2, r3
 8003292:	f080 80ba 	bcs.w	800340a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	893a      	ldrh	r2, [r7, #8]
 800329a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d12a      	bne.n	8003304 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032dc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0210 	bic.w	r2, r2, #16
 80032f8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd ff20 	bl	8001144 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003310:	b29b      	uxth	r3, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	b29b      	uxth	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f893 	bl	8003444 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800331e:	e074      	b.n	800340a <HAL_UART_IRQHandler+0x3f2>
 8003320:	04000120 	.word	0x04000120
 8003324:	08003cb3 	.word	0x08003cb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003334:	b29b      	uxth	r3, r3
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d063      	beq.n	800340e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d060      	beq.n	800340e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800335a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0210 	bic.w	r2, r2, #16
 800338c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f856 	bl	8003444 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003398:	e039      	b.n	800340e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <HAL_UART_IRQHandler+0x3a8>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fd81 	bl	8003ec0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033be:	e029      	b.n	8003414 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00d      	beq.n	80033e6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01a      	beq.n	8003412 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
    }
    return;
 80033e4:	e015      	b.n	8003412 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d011      	beq.n	8003414 <HAL_UART_IRQHandler+0x3fc>
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fc6f 	bl	8003cde <UART_EndTransmit_IT>
    return;
 8003400:	e008      	b.n	8003414 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003402:	bf00      	nop
 8003404:	e006      	b.n	8003414 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003406:	bf00      	nop
 8003408:	e004      	b.n	8003414 <HAL_UART_IRQHandler+0x3fc>
      return;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <HAL_UART_IRQHandler+0x3fc>
      return;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003412:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop

0800341c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800345c:	b5b0      	push	{r4, r5, r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	4313      	orrs	r3, r2
 800347e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4baf      	ldr	r3, [pc, #700]	; (8003744 <UART_SetConfig+0x2e8>)
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	69f9      	ldr	r1, [r7, #28]
 8003490:	430b      	orrs	r3, r1
 8003492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4aa4      	ldr	r2, [pc, #656]	; (8003748 <UART_SetConfig+0x2ec>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a9b      	ldr	r2, [pc, #620]	; (800374c <UART_SetConfig+0x2f0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d121      	bne.n	8003526 <UART_SetConfig+0xca>
 80034e2:	4b9b      	ldr	r3, [pc, #620]	; (8003750 <UART_SetConfig+0x2f4>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d817      	bhi.n	8003520 <UART_SetConfig+0xc4>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <UART_SetConfig+0x9c>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	08003509 	.word	0x08003509
 80034fc:	08003515 	.word	0x08003515
 8003500:	0800350f 	.word	0x0800350f
 8003504:	0800351b 	.word	0x0800351b
 8003508:	2301      	movs	r3, #1
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	e070      	b.n	80035f0 <UART_SetConfig+0x194>
 800350e:	2302      	movs	r3, #2
 8003510:	76fb      	strb	r3, [r7, #27]
 8003512:	e06d      	b.n	80035f0 <UART_SetConfig+0x194>
 8003514:	2304      	movs	r3, #4
 8003516:	76fb      	strb	r3, [r7, #27]
 8003518:	e06a      	b.n	80035f0 <UART_SetConfig+0x194>
 800351a:	2308      	movs	r3, #8
 800351c:	76fb      	strb	r3, [r7, #27]
 800351e:	e067      	b.n	80035f0 <UART_SetConfig+0x194>
 8003520:	2310      	movs	r3, #16
 8003522:	76fb      	strb	r3, [r7, #27]
 8003524:	e064      	b.n	80035f0 <UART_SetConfig+0x194>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a8a      	ldr	r2, [pc, #552]	; (8003754 <UART_SetConfig+0x2f8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d132      	bne.n	8003596 <UART_SetConfig+0x13a>
 8003530:	4b87      	ldr	r3, [pc, #540]	; (8003750 <UART_SetConfig+0x2f4>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d828      	bhi.n	8003590 <UART_SetConfig+0x134>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0xe8>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003579 	.word	0x08003579
 8003548:	08003591 	.word	0x08003591
 800354c:	08003591 	.word	0x08003591
 8003550:	08003591 	.word	0x08003591
 8003554:	08003585 	.word	0x08003585
 8003558:	08003591 	.word	0x08003591
 800355c:	08003591 	.word	0x08003591
 8003560:	08003591 	.word	0x08003591
 8003564:	0800357f 	.word	0x0800357f
 8003568:	08003591 	.word	0x08003591
 800356c:	08003591 	.word	0x08003591
 8003570:	08003591 	.word	0x08003591
 8003574:	0800358b 	.word	0x0800358b
 8003578:	2300      	movs	r3, #0
 800357a:	76fb      	strb	r3, [r7, #27]
 800357c:	e038      	b.n	80035f0 <UART_SetConfig+0x194>
 800357e:	2302      	movs	r3, #2
 8003580:	76fb      	strb	r3, [r7, #27]
 8003582:	e035      	b.n	80035f0 <UART_SetConfig+0x194>
 8003584:	2304      	movs	r3, #4
 8003586:	76fb      	strb	r3, [r7, #27]
 8003588:	e032      	b.n	80035f0 <UART_SetConfig+0x194>
 800358a:	2308      	movs	r3, #8
 800358c:	76fb      	strb	r3, [r7, #27]
 800358e:	e02f      	b.n	80035f0 <UART_SetConfig+0x194>
 8003590:	2310      	movs	r3, #16
 8003592:	76fb      	strb	r3, [r7, #27]
 8003594:	e02c      	b.n	80035f0 <UART_SetConfig+0x194>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6b      	ldr	r2, [pc, #428]	; (8003748 <UART_SetConfig+0x2ec>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d125      	bne.n	80035ec <UART_SetConfig+0x190>
 80035a0:	4b6b      	ldr	r3, [pc, #428]	; (8003750 <UART_SetConfig+0x2f4>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ae:	d017      	beq.n	80035e0 <UART_SetConfig+0x184>
 80035b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035b4:	d817      	bhi.n	80035e6 <UART_SetConfig+0x18a>
 80035b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ba:	d00b      	beq.n	80035d4 <UART_SetConfig+0x178>
 80035bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c0:	d811      	bhi.n	80035e6 <UART_SetConfig+0x18a>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <UART_SetConfig+0x172>
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ca:	d006      	beq.n	80035da <UART_SetConfig+0x17e>
 80035cc:	e00b      	b.n	80035e6 <UART_SetConfig+0x18a>
 80035ce:	2300      	movs	r3, #0
 80035d0:	76fb      	strb	r3, [r7, #27]
 80035d2:	e00d      	b.n	80035f0 <UART_SetConfig+0x194>
 80035d4:	2302      	movs	r3, #2
 80035d6:	76fb      	strb	r3, [r7, #27]
 80035d8:	e00a      	b.n	80035f0 <UART_SetConfig+0x194>
 80035da:	2304      	movs	r3, #4
 80035dc:	76fb      	strb	r3, [r7, #27]
 80035de:	e007      	b.n	80035f0 <UART_SetConfig+0x194>
 80035e0:	2308      	movs	r3, #8
 80035e2:	76fb      	strb	r3, [r7, #27]
 80035e4:	e004      	b.n	80035f0 <UART_SetConfig+0x194>
 80035e6:	2310      	movs	r3, #16
 80035e8:	76fb      	strb	r3, [r7, #27]
 80035ea:	e001      	b.n	80035f0 <UART_SetConfig+0x194>
 80035ec:	2310      	movs	r3, #16
 80035ee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a54      	ldr	r2, [pc, #336]	; (8003748 <UART_SetConfig+0x2ec>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d173      	bne.n	80036e2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035fa:	7efb      	ldrb	r3, [r7, #27]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d824      	bhi.n	800364a <UART_SetConfig+0x1ee>
 8003600:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <UART_SetConfig+0x1ac>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800362d 	.word	0x0800362d
 800360c:	0800364b 	.word	0x0800364b
 8003610:	08003635 	.word	0x08003635
 8003614:	0800364b 	.word	0x0800364b
 8003618:	0800363b 	.word	0x0800363b
 800361c:	0800364b 	.word	0x0800364b
 8003620:	0800364b 	.word	0x0800364b
 8003624:	0800364b 	.word	0x0800364b
 8003628:	08003643 	.word	0x08003643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800362c:	f7fe fd9a 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 8003630:	6178      	str	r0, [r7, #20]
        break;
 8003632:	e00f      	b.n	8003654 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003634:	4b48      	ldr	r3, [pc, #288]	; (8003758 <UART_SetConfig+0x2fc>)
 8003636:	617b      	str	r3, [r7, #20]
        break;
 8003638:	e00c      	b.n	8003654 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363a:	f7fe fcfb 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 800363e:	6178      	str	r0, [r7, #20]
        break;
 8003640:	e008      	b.n	8003654 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003646:	617b      	str	r3, [r7, #20]
        break;
 8003648:	e004      	b.n	8003654 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	76bb      	strb	r3, [r7, #26]
        break;
 8003652:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80fe 	beq.w	8003858 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	d305      	bcc.n	8003678 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	d902      	bls.n	800367e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	76bb      	strb	r3, [r7, #26]
 800367c:	e0ec      	b.n	8003858 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	4618      	mov	r0, r3
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	020b      	lsls	r3, r1, #8
 8003690:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003694:	0202      	lsls	r2, r0, #8
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	6849      	ldr	r1, [r1, #4]
 800369a:	0849      	lsrs	r1, r1, #1
 800369c:	4608      	mov	r0, r1
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	1814      	adds	r4, r2, r0
 80036a4:	eb43 0501 	adc.w	r5, r3, r1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	4620      	mov	r0, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	f7fc fddb 	bl	8000270 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4613      	mov	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c8:	d308      	bcc.n	80036dc <UART_SetConfig+0x280>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d0:	d204      	bcs.n	80036dc <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	e0bd      	b.n	8003858 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	76bb      	strb	r3, [r7, #26]
 80036e0:	e0ba      	b.n	8003858 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ea:	d168      	bne.n	80037be <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80036ec:	7efb      	ldrb	r3, [r7, #27]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d834      	bhi.n	800375c <UART_SetConfig+0x300>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0x29c>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	08003725 	.word	0x08003725
 8003700:	0800372d 	.word	0x0800372d
 8003704:	0800375d 	.word	0x0800375d
 8003708:	08003733 	.word	0x08003733
 800370c:	0800375d 	.word	0x0800375d
 8003710:	0800375d 	.word	0x0800375d
 8003714:	0800375d 	.word	0x0800375d
 8003718:	0800373b 	.word	0x0800373b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800371c:	f7fe fd22 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 8003720:	6178      	str	r0, [r7, #20]
        break;
 8003722:	e020      	b.n	8003766 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7fe fd34 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8003728:	6178      	str	r0, [r7, #20]
        break;
 800372a:	e01c      	b.n	8003766 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <UART_SetConfig+0x2fc>)
 800372e:	617b      	str	r3, [r7, #20]
        break;
 8003730:	e019      	b.n	8003766 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003732:	f7fe fc7f 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8003736:	6178      	str	r0, [r7, #20]
        break;
 8003738:	e015      	b.n	8003766 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800373e:	617b      	str	r3, [r7, #20]
        break;
 8003740:	e011      	b.n	8003766 <UART_SetConfig+0x30a>
 8003742:	bf00      	nop
 8003744:	efff69f3 	.word	0xefff69f3
 8003748:	40008000 	.word	0x40008000
 800374c:	40013800 	.word	0x40013800
 8003750:	40021000 	.word	0x40021000
 8003754:	40004400 	.word	0x40004400
 8003758:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	76bb      	strb	r3, [r7, #26]
        break;
 8003764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d075      	beq.n	8003858 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005a      	lsls	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	b29b      	uxth	r3, r3
 8003782:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	d916      	bls.n	80037b8 <UART_SetConfig+0x35c>
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d212      	bcs.n	80037b8 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	b29b      	uxth	r3, r3
 8003796:	f023 030f 	bic.w	r3, r3, #15
 800379a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	89fb      	ldrh	r3, [r7, #14]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	89fa      	ldrh	r2, [r7, #14]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	e04f      	b.n	8003858 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	76bb      	strb	r3, [r7, #26]
 80037bc:	e04c      	b.n	8003858 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037be:	7efb      	ldrb	r3, [r7, #27]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d828      	bhi.n	8003816 <UART_SetConfig+0x3ba>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <UART_SetConfig+0x370>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	080037f1 	.word	0x080037f1
 80037d0:	080037f9 	.word	0x080037f9
 80037d4:	08003801 	.word	0x08003801
 80037d8:	08003817 	.word	0x08003817
 80037dc:	08003807 	.word	0x08003807
 80037e0:	08003817 	.word	0x08003817
 80037e4:	08003817 	.word	0x08003817
 80037e8:	08003817 	.word	0x08003817
 80037ec:	0800380f 	.word	0x0800380f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7fe fcb8 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 80037f4:	6178      	str	r0, [r7, #20]
        break;
 80037f6:	e013      	b.n	8003820 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f8:	f7fe fcca 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 80037fc:	6178      	str	r0, [r7, #20]
        break;
 80037fe:	e00f      	b.n	8003820 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003800:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <UART_SetConfig+0x414>)
 8003802:	617b      	str	r3, [r7, #20]
        break;
 8003804:	e00c      	b.n	8003820 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003806:	f7fe fc15 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 800380a:	6178      	str	r0, [r7, #20]
        break;
 800380c:	e008      	b.n	8003820 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003812:	617b      	str	r3, [r7, #20]
        break;
 8003814:	e004      	b.n	8003820 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	76bb      	strb	r3, [r7, #26]
        break;
 800381e:	bf00      	nop
    }

    if (pclk != 0U)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d018      	beq.n	8003858 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	085a      	lsrs	r2, r3, #1
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	441a      	add	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	b29b      	uxth	r3, r3
 800383a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	d908      	bls.n	8003854 <UART_SetConfig+0x3f8>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d204      	bcs.n	8003854 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	e001      	b.n	8003858 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003864:	7ebb      	ldrb	r3, [r7, #26]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bdb0      	pop	{r4, r5, r7, pc}
 800386e:	bf00      	nop
 8003870:	00f42400 	.word	0x00f42400

08003874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01a      	beq.n	800398a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003972:	d10a      	bne.n	800398a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  }
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039c8:	f7fd faaa 	bl	8000f20 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d10e      	bne.n	80039fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f82d 	bl	8003a4a <UART_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e023      	b.n	8003a42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d10e      	bne.n	8003a26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f817 	bl	8003a4a <UART_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e00d      	b.n	8003a42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	4613      	mov	r3, r2
 8003a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a5a:	e05e      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a62:	d05a      	beq.n	8003b1a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a64:	f7fd fa5c 	bl	8000f20 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11b      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a88:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e043      	b.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02c      	beq.n	8003b1a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ace:	d124      	bne.n	8003b1a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ad8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ae8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e00f      	b.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4013      	ands	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d091      	beq.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	d10e      	bne.n	8003b96 <UART_Start_Receive_IT+0x52>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <UART_Start_Receive_IT+0x48>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b8a:	e02d      	b.n	8003be8 <UART_Start_Receive_IT+0xa4>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b94:	e028      	b.n	8003be8 <UART_Start_Receive_IT+0xa4>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <UART_Start_Receive_IT+0x76>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <UART_Start_Receive_IT+0x6c>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	22ff      	movs	r2, #255	; 0xff
 8003baa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bae:	e01b      	b.n	8003be8 <UART_Start_Receive_IT+0xa4>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	227f      	movs	r2, #127	; 0x7f
 8003bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bb8:	e016      	b.n	8003be8 <UART_Start_Receive_IT+0xa4>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bc2:	d10d      	bne.n	8003be0 <UART_Start_Receive_IT+0x9c>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <UART_Start_Receive_IT+0x92>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	227f      	movs	r2, #127	; 0x7f
 8003bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bd4:	e008      	b.n	8003be8 <UART_Start_Receive_IT+0xa4>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	223f      	movs	r2, #63	; 0x3f
 8003bda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bde:	e003      	b.n	8003be8 <UART_Start_Receive_IT+0xa4>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2222      	movs	r2, #34	; 0x22
 8003bf4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0e:	d107      	bne.n	8003c20 <UART_Start_Receive_IT+0xdc>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d103      	bne.n	8003c20 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <UART_Start_Receive_IT+0x108>)
 8003c1c:	665a      	str	r2, [r3, #100]	; 0x64
 8003c1e:	e002      	b.n	8003c26 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a0b      	ldr	r2, [pc, #44]	; (8003c50 <UART_Start_Receive_IT+0x10c>)
 8003c24:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003c3c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	08003de9 	.word	0x08003de9
 8003c50:	08003d11 	.word	0x08003d11

08003c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0210 	bic.w	r2, r2, #16
 8003c92:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff fbad 	bl	8003430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fb8a 	bl	800341c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d1e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d24:	2b22      	cmp	r3, #34	; 0x22
 8003d26:	d151      	bne.n	8003dcc <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d2e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d30:	89bb      	ldrh	r3, [r7, #12]
 8003d32:	b2d9      	uxtb	r1, r3
 8003d34:	89fb      	ldrh	r3, [r7, #14]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d13a      	bne.n	8003de0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10f      	bne.n	8003dbe <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0210 	bic.w	r2, r2, #16
 8003dac:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003db4:	4619      	mov	r1, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fb44 	bl	8003444 <HAL_UARTEx_RxEventCallback>
 8003dbc:	e002      	b.n	8003dc4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fc fe00 	bl	80009c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dca:	e009      	b.n	8003de0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	8b1b      	ldrh	r3, [r3, #24]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0208 	orr.w	r2, r2, #8
 8003ddc:	b292      	uxth	r2, r2
 8003dde:	831a      	strh	r2, [r3, #24]
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003df6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfc:	2b22      	cmp	r3, #34	; 0x22
 8003dfe:	d151      	bne.n	8003ea4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e06:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e0e:	89ba      	ldrh	r2, [r7, #12]
 8003e10:	89fb      	ldrh	r3, [r7, #14]
 8003e12:	4013      	ands	r3, r2
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d13a      	bne.n	8003eb8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e50:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d10f      	bne.n	8003e96 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0210 	bic.w	r2, r2, #16
 8003e84:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fad8 	bl	8003444 <HAL_UARTEx_RxEventCallback>
 8003e94:	e002      	b.n	8003e9c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc fd94 	bl	80009c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ea2:	e009      	b.n	8003eb8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	8b1b      	ldrh	r3, [r3, #24]
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0208 	orr.w	r2, r2, #8
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	831a      	strh	r2, [r3, #24]
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <__NVIC_SetPriority>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	db0a      	blt.n	8003efe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	490c      	ldr	r1, [pc, #48]	; (8003f20 <__NVIC_SetPriority+0x4c>)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	0112      	lsls	r2, r2, #4
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003efc:	e00a      	b.n	8003f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4908      	ldr	r1, [pc, #32]	; (8003f24 <__NVIC_SetPriority+0x50>)
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	3b04      	subs	r3, #4
 8003f0c:	0112      	lsls	r2, r2, #4
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	440b      	add	r3, r1
 8003f12:	761a      	strb	r2, [r3, #24]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	e000e100 	.word	0xe000e100
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <SysTick_Handler+0x1c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f30:	f001 fcfe 	bl	8005930 <xTaskGetSchedulerState>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d001      	beq.n	8003f3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f3a:	f002 fae5 	bl	8006508 <xPortSysTickHandler>
  }
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000e010 	.word	0xe000e010

08003f48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	f06f 0004 	mvn.w	r0, #4
 8003f52:	f7ff ffbf 	bl	8003ed4 <__NVIC_SetPriority>
#endif
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f62:	f3ef 8305 	mrs	r3, IPSR
 8003f66:	603b      	str	r3, [r7, #0]
  return(result);
 8003f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f6e:	f06f 0305 	mvn.w	r3, #5
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	e00c      	b.n	8003f90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <osKernelInitialize+0x44>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <osKernelInitialize+0x44>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	e002      	b.n	8003f90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f90:	687b      	ldr	r3, [r7, #4]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	200003bc 	.word	0x200003bc

08003fa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003faa:	f3ef 8305 	mrs	r3, IPSR
 8003fae:	603b      	str	r3, [r7, #0]
  return(result);
 8003fb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8003fb6:	f06f 0305 	mvn.w	r3, #5
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	e010      	b.n	8003fe0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <osKernelStart+0x48>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d109      	bne.n	8003fda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fc6:	f7ff ffbf 	bl	8003f48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <osKernelStart+0x48>)
 8003fcc:	2202      	movs	r2, #2
 8003fce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fd0:	f001 f866 	bl	80050a0 <vTaskStartScheduler>
      stat = osOK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	e002      	b.n	8003fe0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fe0:	687b      	ldr	r3, [r7, #4]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	200003bc 	.word	0x200003bc

08003ff0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08e      	sub	sp, #56	; 0x38
 8003ff4:	af04      	add	r7, sp, #16
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004000:	f3ef 8305 	mrs	r3, IPSR
 8004004:	617b      	str	r3, [r7, #20]
  return(result);
 8004006:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004008:	2b00      	cmp	r3, #0
 800400a:	d17e      	bne.n	800410a <osThreadNew+0x11a>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d07b      	beq.n	800410a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004016:	2318      	movs	r3, #24
 8004018:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004022:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d045      	beq.n	80040b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <osThreadNew+0x48>
        name = attr->name;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <osThreadNew+0x6e>
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b38      	cmp	r3, #56	; 0x38
 8004050:	d805      	bhi.n	800405e <osThreadNew+0x6e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <osThreadNew+0x72>
        return (NULL);
 800405e:	2300      	movs	r3, #0
 8004060:	e054      	b.n	800410c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00e      	beq.n	8004098 <osThreadNew+0xa8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b5b      	cmp	r3, #91	; 0x5b
 8004080:	d90a      	bls.n	8004098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <osThreadNew+0xa8>
        mem = 1;
 8004092:	2301      	movs	r3, #1
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	e010      	b.n	80040ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10c      	bne.n	80040ba <osThreadNew+0xca>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d108      	bne.n	80040ba <osThreadNew+0xca>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <osThreadNew+0xca>
          mem = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	e001      	b.n	80040ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d110      	bne.n	80040e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040c8:	9202      	str	r2, [sp, #8]
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fe0c 	bl	8004cf4 <xTaskCreateStatic>
 80040dc:	4603      	mov	r3, r0
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	e013      	b.n	800410a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d110      	bne.n	800410a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	f107 0310 	add.w	r3, r7, #16
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fe57 	bl	8004dae <xTaskCreate>
 8004100:	4603      	mov	r3, r0
 8004102:	2b01      	cmp	r3, #1
 8004104:	d001      	beq.n	800410a <osThreadNew+0x11a>
            hTask = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800410a:	693b      	ldr	r3, [r7, #16]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3728      	adds	r7, #40	; 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800411c:	f3ef 8305 	mrs	r3, IPSR
 8004120:	60bb      	str	r3, [r7, #8]
  return(result);
 8004122:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <osDelay+0x1c>
    stat = osErrorISR;
 8004128:	f06f 0305 	mvn.w	r3, #5
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e007      	b.n	8004140 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <osDelay+0x2c>
      vTaskDelay(ticks);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 ff7c 	bl	8005038 <vTaskDelay>
    }
  }

  return (stat);
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <vApplicationGetIdleTaskMemory+0x2c>)
 800415c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4a06      	ldr	r2, [pc, #24]	; (800417c <vApplicationGetIdleTaskMemory+0x30>)
 8004162:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2280      	movs	r2, #128	; 0x80
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	200003c0 	.word	0x200003c0
 800417c:	2000041c 	.word	0x2000041c

08004180 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <vApplicationGetTimerTaskMemory+0x2c>)
 8004190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4a06      	ldr	r2, [pc, #24]	; (80041b0 <vApplicationGetTimerTaskMemory+0x30>)
 8004196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800419e:	601a      	str	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	2000061c 	.word	0x2000061c
 80041b0:	20000678 	.word	0x20000678

080041b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f103 0208 	add.w	r2, r3, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f103 0208 	add.w	r2, r3, #8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 0208 	add.w	r2, r3, #8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800426c:	d103      	bne.n	8004276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e00c      	b.n	8004290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3308      	adds	r3, #8
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e002      	b.n	8004284 <vListInsert+0x2e>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	d2f6      	bcs.n	800427e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6852      	ldr	r2, [r2, #4]
 80042e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d103      	bne.n	80042fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004346:	f002 f84d 	bl	80063e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	3b01      	subs	r3, #1
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	441a      	add	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	22ff      	movs	r2, #255	; 0xff
 800438a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	22ff      	movs	r2, #255	; 0xff
 8004392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d114      	bne.n	80043c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01a      	beq.n	80043da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3310      	adds	r3, #16
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 f903 	bl	80055b4 <xTaskRemoveFromEventList>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d012      	beq.n	80043da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <xQueueGenericReset+0xcc>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	e009      	b.n	80043da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3310      	adds	r3, #16
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fef2 	bl	80041b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff feed 	bl	80041b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043da:	f002 f833 	bl	8006444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043de:	2301      	movs	r3, #1
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <xQueueGenericCreateStatic+0x52>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <xQueueGenericCreateStatic+0x56>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <xQueueGenericCreateStatic+0x58>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	623b      	str	r3, [r7, #32]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <xQueueGenericCreateStatic+0x7e>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <xQueueGenericCreateStatic+0x82>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueGenericCreateStatic+0x84>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	61fb      	str	r3, [r7, #28]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800448a:	2350      	movs	r3, #80	; 0x50
 800448c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b50      	cmp	r3, #80	; 0x50
 8004492:	d00a      	beq.n	80044aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	61bb      	str	r3, [r7, #24]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	4613      	mov	r3, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f805 	bl	80044dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3730      	adds	r7, #48	; 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e002      	b.n	80044fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800450a:	2101      	movs	r1, #1
 800450c:	69b8      	ldr	r0, [r7, #24]
 800450e:	f7ff ff05 	bl	800431c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08e      	sub	sp, #56	; 0x38
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <xQueueGenericSend+0x32>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d103      	bne.n	8004564 <xQueueGenericSend+0x40>
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <xQueueGenericSend+0x44>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <xQueueGenericSend+0x46>
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <xQueueGenericSend+0x60>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d103      	bne.n	8004592 <xQueueGenericSend+0x6e>
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <xQueueGenericSend+0x72>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <xQueueGenericSend+0x74>
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	623b      	str	r3, [r7, #32]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045b2:	f001 f9bd 	bl	8005930 <xTaskGetSchedulerState>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <xQueueGenericSend+0x9e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <xQueueGenericSend+0xa2>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <xQueueGenericSend+0xa4>
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	61fb      	str	r3, [r7, #28]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045e2:	f001 feff 	bl	80063e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <xQueueGenericSend+0xd4>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d129      	bne.n	800464c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fe:	f000 fa0b 	bl	8004a18 <prvCopyDataToQueue>
 8004602:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	d010      	beq.n	800462e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	3324      	adds	r3, #36	; 0x24
 8004610:	4618      	mov	r0, r3
 8004612:	f000 ffcf 	bl	80055b4 <xTaskRemoveFromEventList>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800461c:	4b3f      	ldr	r3, [pc, #252]	; (800471c <xQueueGenericSend+0x1f8>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	e00a      	b.n	8004644 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004634:	4b39      	ldr	r3, [pc, #228]	; (800471c <xQueueGenericSend+0x1f8>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004644:	f001 fefe 	bl	8006444 <vPortExitCritical>
				return pdPASS;
 8004648:	2301      	movs	r3, #1
 800464a:	e063      	b.n	8004714 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004652:	f001 fef7 	bl	8006444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004656:	2300      	movs	r3, #0
 8004658:	e05c      	b.n	8004714 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4618      	mov	r0, r3
 8004666:	f001 f809 	bl	800567c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800466e:	f001 fee9 	bl	8006444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004672:	f000 fd7b 	bl	800516c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004676:	f001 feb5 	bl	80063e4 <vPortEnterCritical>
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004680:	b25b      	sxtb	r3, r3
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004686:	d103      	bne.n	8004690 <xQueueGenericSend+0x16c>
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004696:	b25b      	sxtb	r3, r3
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469c:	d103      	bne.n	80046a6 <xQueueGenericSend+0x182>
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a6:	f001 fecd 	bl	8006444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046aa:	1d3a      	adds	r2, r7, #4
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	4611      	mov	r1, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fff8 	bl	80056a8 <xTaskCheckForTimeOut>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d124      	bne.n	8004708 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c0:	f000 faa2 	bl	8004c08 <prvIsQueueFull>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d018      	beq.n	80046fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	3310      	adds	r3, #16
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ff1e 	bl	8005514 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046da:	f000 fa2d 	bl	8004b38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046de:	f000 fd53 	bl	8005188 <xTaskResumeAll>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f af7c 	bne.w	80045e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <xQueueGenericSend+0x1f8>)
 80046ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	e772      	b.n	80045e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046fe:	f000 fa1b 	bl	8004b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004702:	f000 fd41 	bl	8005188 <xTaskResumeAll>
 8004706:	e76c      	b.n	80045e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470a:	f000 fa15 	bl	8004b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800470e:	f000 fd3b 	bl	8005188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004714:	4618      	mov	r0, r3
 8004716:	3738      	adds	r7, #56	; 0x38
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b090      	sub	sp, #64	; 0x40
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <xQueueGenericSendFromISR+0x3c>
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <xQueueGenericSendFromISR+0x40>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <xQueueGenericSendFromISR+0x42>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d103      	bne.n	800478a <xQueueGenericSendFromISR+0x6a>
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <xQueueGenericSendFromISR+0x6e>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <xQueueGenericSendFromISR+0x70>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	623b      	str	r3, [r7, #32]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047aa:	f001 fefd 	bl	80065a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047ae:	f3ef 8211 	mrs	r2, BASEPRI
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	61fa      	str	r2, [r7, #28]
 80047c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <xQueueGenericSendFromISR+0xbc>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d12f      	bne.n	800483c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047f2:	f000 f911 	bl	8004a18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047fe:	d112      	bne.n	8004826 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d016      	beq.n	8004836 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	3324      	adds	r3, #36	; 0x24
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fed1 	bl	80055b4 <xTaskRemoveFromEventList>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e007      	b.n	8004836 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800482a:	3301      	adds	r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	b25a      	sxtb	r2, r3
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004836:	2301      	movs	r3, #1
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800483a:	e001      	b.n	8004840 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800483c:	2300      	movs	r3, #0
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800484a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800484c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800484e:	4618      	mov	r0, r3
 8004850:	3740      	adds	r7, #64	; 0x40
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <xQueueReceive+0x30>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	623b      	str	r3, [r7, #32]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <xQueueReceive+0x3e>
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <xQueueReceive+0x42>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <xQueueReceive+0x44>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <xQueueReceive+0x5e>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	61fb      	str	r3, [r7, #28]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048b6:	f001 f83b 	bl	8005930 <xTaskGetSchedulerState>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <xQueueReceive+0x6e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <xQueueReceive+0x72>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <xQueueReceive+0x74>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xQueueReceive+0x8e>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	61bb      	str	r3, [r7, #24]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048e6:	f001 fd7d 	bl	80063e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01f      	beq.n	8004936 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048fa:	f000 f8f7 	bl	8004aec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	1e5a      	subs	r2, r3, #1
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	3310      	adds	r3, #16
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fe4e 	bl	80055b4 <xTaskRemoveFromEventList>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800491e:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <xQueueReceive+0x1bc>)
 8004920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800492e:	f001 fd89 	bl	8006444 <vPortExitCritical>
				return pdPASS;
 8004932:	2301      	movs	r3, #1
 8004934:	e069      	b.n	8004a0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800493c:	f001 fd82 	bl	8006444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004940:	2300      	movs	r3, #0
 8004942:	e062      	b.n	8004a0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800494a:	f107 0310 	add.w	r3, r7, #16
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fe94 	bl	800567c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004958:	f001 fd74 	bl	8006444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800495c:	f000 fc06 	bl	800516c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004960:	f001 fd40 	bl	80063e4 <vPortEnterCritical>
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800496a:	b25b      	sxtb	r3, r3
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004970:	d103      	bne.n	800497a <xQueueReceive+0x122>
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004980:	b25b      	sxtb	r3, r3
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004986:	d103      	bne.n	8004990 <xQueueReceive+0x138>
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004990:	f001 fd58 	bl	8006444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004994:	1d3a      	adds	r2, r7, #4
 8004996:	f107 0310 	add.w	r3, r7, #16
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fe83 	bl	80056a8 <xTaskCheckForTimeOut>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d123      	bne.n	80049f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049aa:	f000 f917 	bl	8004bdc <prvIsQueueEmpty>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d017      	beq.n	80049e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	3324      	adds	r3, #36	; 0x24
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fda9 	bl	8005514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c4:	f000 f8b8 	bl	8004b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049c8:	f000 fbde 	bl	8005188 <xTaskResumeAll>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d189      	bne.n	80048e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <xQueueReceive+0x1bc>)
 80049d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	e780      	b.n	80048e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e6:	f000 f8a7 	bl	8004b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ea:	f000 fbcd 	bl	8005188 <xTaskResumeAll>
 80049ee:	e77a      	b.n	80048e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f000 f8a1 	bl	8004b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049f6:	f000 fbc7 	bl	8005188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fc:	f000 f8ee 	bl	8004bdc <prvIsQueueEmpty>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f43f af6f 	beq.w	80048e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3730      	adds	r7, #48	; 0x30
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10d      	bne.n	8004a52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d14d      	bne.n	8004ada <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 ff92 	bl	800596c <xTaskPriorityDisinherit>
 8004a48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	e043      	b.n	8004ada <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d119      	bne.n	8004a8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6858      	ldr	r0, [r3, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	461a      	mov	r2, r3
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	f001 fff4 	bl	8006a50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	441a      	add	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d32b      	bcc.n	8004ada <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	e026      	b.n	8004ada <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68d8      	ldr	r0, [r3, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	461a      	mov	r2, r3
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	f001 ffda 	bl	8006a50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	425b      	negs	r3, r3
 8004aa6:	441a      	add	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d207      	bcs.n	8004ac8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	425b      	negs	r3, r3
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d105      	bne.n	8004ada <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ae2:	697b      	ldr	r3, [r7, #20]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d018      	beq.n	8004b30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	441a      	add	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d303      	bcc.n	8004b20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68d9      	ldr	r1, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6838      	ldr	r0, [r7, #0]
 8004b2c:	f001 ff90 	bl	8006a50 <memcpy>
	}
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b40:	f001 fc50 	bl	80063e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b4c:	e011      	b.n	8004b72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d012      	beq.n	8004b7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3324      	adds	r3, #36	; 0x24
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fd2a 	bl	80055b4 <xTaskRemoveFromEventList>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b66:	f000 fe01 	bl	800576c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	dce9      	bgt.n	8004b4e <prvUnlockQueue+0x16>
 8004b7a:	e000      	b.n	8004b7e <prvUnlockQueue+0x46>
					break;
 8004b7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	22ff      	movs	r2, #255	; 0xff
 8004b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b86:	f001 fc5d 	bl	8006444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b8a:	f001 fc2b 	bl	80063e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b96:	e011      	b.n	8004bbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d012      	beq.n	8004bc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3310      	adds	r3, #16
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fd05 	bl	80055b4 <xTaskRemoveFromEventList>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bb0:	f000 fddc 	bl	800576c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bb4:	7bbb      	ldrb	r3, [r7, #14]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	dce9      	bgt.n	8004b98 <prvUnlockQueue+0x60>
 8004bc4:	e000      	b.n	8004bc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	22ff      	movs	r2, #255	; 0xff
 8004bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bd0:	f001 fc38 	bl	8006444 <vPortExitCritical>
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004be4:	f001 fbfe 	bl	80063e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e001      	b.n	8004bfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bfa:	f001 fc23 	bl	8006444 <vPortExitCritical>

	return xReturn;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c10:	f001 fbe8 	bl	80063e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d102      	bne.n	8004c26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c20:	2301      	movs	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e001      	b.n	8004c2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c2a:	f001 fc0b 	bl	8006444 <vPortExitCritical>

	return xReturn;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e014      	b.n	8004c72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c48:	4a0f      	ldr	r2, [pc, #60]	; (8004c88 <vQueueAddToRegistry+0x50>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c54:	490c      	ldr	r1, [pc, #48]	; (8004c88 <vQueueAddToRegistry+0x50>)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <vQueueAddToRegistry+0x50>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4413      	add	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c6a:	e006      	b.n	8004c7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b07      	cmp	r3, #7
 8004c76:	d9e7      	bls.n	8004c48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20001e38 	.word	0x20001e38

08004c8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c9c:	f001 fba2 	bl	80063e4 <vPortEnterCritical>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cac:	d103      	bne.n	8004cb6 <vQueueWaitForMessageRestricted+0x2a>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc2:	d103      	bne.n	8004ccc <vQueueWaitForMessageRestricted+0x40>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ccc:	f001 fbba 	bl	8006444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	3324      	adds	r3, #36	; 0x24
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fc3b 	bl	800555c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ce6:	6978      	ldr	r0, [r7, #20]
 8004ce8:	f7ff ff26 	bl	8004b38 <prvUnlockQueue>
	}
 8004cec:	bf00      	nop
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08e      	sub	sp, #56	; 0x38
 8004cf8:	af04      	add	r7, sp, #16
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	623b      	str	r3, [r7, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <xTaskCreateStatic+0x46>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	61fb      	str	r3, [r7, #28]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d3a:	235c      	movs	r3, #92	; 0x5c
 8004d3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b5c      	cmp	r3, #92	; 0x5c
 8004d42:	d00a      	beq.n	8004d5a <xTaskCreateStatic+0x66>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	61bb      	str	r3, [r7, #24]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01e      	beq.n	8004da0 <xTaskCreateStatic+0xac>
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01b      	beq.n	8004da0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9303      	str	r3, [sp, #12]
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	9302      	str	r3, [sp, #8]
 8004d82:	f107 0314 	add.w	r3, r7, #20
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f850 	bl	8004e38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d9a:	f000 f8dd 	bl	8004f58 <prvAddNewTaskToReadyList>
 8004d9e:	e001      	b.n	8004da4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004da4:	697b      	ldr	r3, [r7, #20]
	}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3728      	adds	r7, #40	; 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b08c      	sub	sp, #48	; 0x30
 8004db2:	af04      	add	r7, sp, #16
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	603b      	str	r3, [r7, #0]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 fc30 	bl	8006628 <pvPortMalloc>
 8004dc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dd0:	205c      	movs	r0, #92	; 0x5c
 8004dd2:	f001 fc29 	bl	8006628 <pvPortMalloc>
 8004dd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
 8004de4:	e005      	b.n	8004df2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004de6:	6978      	ldr	r0, [r7, #20]
 8004de8:	f001 fcea 	bl	80067c0 <vPortFree>
 8004dec:	e001      	b.n	8004df2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d017      	beq.n	8004e28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e00:	88fa      	ldrh	r2, [r7, #6]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9303      	str	r3, [sp, #12]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	9302      	str	r3, [sp, #8]
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f80e 	bl	8004e38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e1c:	69f8      	ldr	r0, [r7, #28]
 8004e1e:	f000 f89b 	bl	8004f58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e002      	b.n	8004e2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
	}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	461a      	mov	r2, r3
 8004e50:	21a5      	movs	r1, #165	; 0xa5
 8004e52:	f001 fe0b 	bl	8006a6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e60:	3b01      	subs	r3, #1
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	f023 0307 	bic.w	r3, r3, #7
 8004e6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	617b      	str	r3, [r7, #20]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01f      	beq.n	8004ed6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	e012      	b.n	8004ec2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	7819      	ldrb	r1, [r3, #0]
 8004ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3334      	adds	r3, #52	; 0x34
 8004eac:	460a      	mov	r2, r1
 8004eae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d006      	beq.n	8004eca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2b0f      	cmp	r3, #15
 8004ec6:	d9e9      	bls.n	8004e9c <prvInitialiseNewTask+0x64>
 8004ec8:	e000      	b.n	8004ecc <prvInitialiseNewTask+0x94>
			{
				break;
 8004eca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed4:	e003      	b.n	8004ede <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	2b37      	cmp	r3, #55	; 0x37
 8004ee2:	d901      	bls.n	8004ee8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ee4:	2337      	movs	r3, #55	; 0x37
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	3304      	adds	r3, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff f978 	bl	80041f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	3318      	adds	r3, #24
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff f973 	bl	80041f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	2200      	movs	r2, #0
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	69b8      	ldr	r0, [r7, #24]
 8004f38:	f001 f928 	bl	800618c <pxPortInitialiseStack>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f4e:	bf00      	nop
 8004f50:	3720      	adds	r7, #32
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f60:	f001 fa40 	bl	80063e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f64:	4b2d      	ldr	r3, [pc, #180]	; (800501c <prvAddNewTaskToReadyList+0xc4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	4a2c      	ldr	r2, [pc, #176]	; (800501c <prvAddNewTaskToReadyList+0xc4>)
 8004f6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f6e:	4b2c      	ldr	r3, [pc, #176]	; (8005020 <prvAddNewTaskToReadyList+0xc8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f76:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <prvAddNewTaskToReadyList+0xc8>)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f7c:	4b27      	ldr	r3, [pc, #156]	; (800501c <prvAddNewTaskToReadyList+0xc4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d110      	bne.n	8004fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f84:	f000 fc16 	bl	80057b4 <prvInitialiseTaskLists>
 8004f88:	e00d      	b.n	8004fa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f8a:	4b26      	ldr	r3, [pc, #152]	; (8005024 <prvAddNewTaskToReadyList+0xcc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f92:	4b23      	ldr	r3, [pc, #140]	; (8005020 <prvAddNewTaskToReadyList+0xc8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d802      	bhi.n	8004fa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fa0:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <prvAddNewTaskToReadyList+0xc8>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fa6:	4b20      	ldr	r3, [pc, #128]	; (8005028 <prvAddNewTaskToReadyList+0xd0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3301      	adds	r3, #1
 8004fac:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <prvAddNewTaskToReadyList+0xd0>)
 8004fae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <prvAddNewTaskToReadyList+0xd0>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	; (800502c <prvAddNewTaskToReadyList+0xd4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d903      	bls.n	8004fcc <prvAddNewTaskToReadyList+0x74>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	4a18      	ldr	r2, [pc, #96]	; (800502c <prvAddNewTaskToReadyList+0xd4>)
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4a15      	ldr	r2, [pc, #84]	; (8005030 <prvAddNewTaskToReadyList+0xd8>)
 8004fda:	441a      	add	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f7ff f913 	bl	800420e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fe8:	f001 fa2c 	bl	8006444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fec:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <prvAddNewTaskToReadyList+0xcc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <prvAddNewTaskToReadyList+0xc8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d207      	bcs.n	8005012 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <prvAddNewTaskToReadyList+0xdc>)
 8005004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000f4c 	.word	0x20000f4c
 8005020:	20000a78 	.word	0x20000a78
 8005024:	20000f58 	.word	0x20000f58
 8005028:	20000f68 	.word	0x20000f68
 800502c:	20000f54 	.word	0x20000f54
 8005030:	20000a7c 	.word	0x20000a7c
 8005034:	e000ed04 	.word	0xe000ed04

08005038 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d017      	beq.n	800507a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <vTaskDelay+0x60>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <vTaskDelay+0x30>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	60bb      	str	r3, [r7, #8]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005068:	f000 f880 	bl	800516c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800506c:	2100      	movs	r1, #0
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fcea 	bl	8005a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005074:	f000 f888 	bl	8005188 <xTaskResumeAll>
 8005078:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d107      	bne.n	8005090 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <vTaskDelay+0x64>)
 8005082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000f74 	.word	0x20000f74
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050ae:	463a      	mov	r2, r7
 80050b0:	1d39      	adds	r1, r7, #4
 80050b2:	f107 0308 	add.w	r3, r7, #8
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff f848 	bl	800414c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	9202      	str	r2, [sp, #8]
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	2300      	movs	r3, #0
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	2300      	movs	r3, #0
 80050cc:	460a      	mov	r2, r1
 80050ce:	4921      	ldr	r1, [pc, #132]	; (8005154 <vTaskStartScheduler+0xb4>)
 80050d0:	4821      	ldr	r0, [pc, #132]	; (8005158 <vTaskStartScheduler+0xb8>)
 80050d2:	f7ff fe0f 	bl	8004cf4 <xTaskCreateStatic>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4a20      	ldr	r2, [pc, #128]	; (800515c <vTaskStartScheduler+0xbc>)
 80050da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050dc:	4b1f      	ldr	r3, [pc, #124]	; (800515c <vTaskStartScheduler+0xbc>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050e4:	2301      	movs	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e001      	b.n	80050ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d102      	bne.n	80050fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050f4:	f000 fcfc 	bl	8005af0 <xTimerCreateTimerTask>
 80050f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d116      	bne.n	800512e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	613b      	str	r3, [r7, #16]
}
 8005112:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <vTaskStartScheduler+0xc0>)
 8005116:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800511a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800511c:	4b11      	ldr	r3, [pc, #68]	; (8005164 <vTaskStartScheduler+0xc4>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <vTaskStartScheduler+0xc8>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005128:	f001 f8ba 	bl	80062a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800512c:	e00e      	b.n	800514c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005134:	d10a      	bne.n	800514c <vTaskStartScheduler+0xac>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60fb      	str	r3, [r7, #12]
}
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <vTaskStartScheduler+0xaa>
}
 800514c:	bf00      	nop
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	08007360 	.word	0x08007360
 8005158:	08005785 	.word	0x08005785
 800515c:	20000f70 	.word	0x20000f70
 8005160:	20000f6c 	.word	0x20000f6c
 8005164:	20000f58 	.word	0x20000f58
 8005168:	20000f50 	.word	0x20000f50

0800516c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <vTaskSuspendAll+0x18>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	4a03      	ldr	r2, [pc, #12]	; (8005184 <vTaskSuspendAll+0x18>)
 8005178:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800517a:	bf00      	nop
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	20000f74 	.word	0x20000f74

08005188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005196:	4b42      	ldr	r3, [pc, #264]	; (80052a0 <xTaskResumeAll+0x118>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	603b      	str	r3, [r7, #0]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051b4:	f001 f916 	bl	80063e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051b8:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <xTaskResumeAll+0x118>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3b01      	subs	r3, #1
 80051be:	4a38      	ldr	r2, [pc, #224]	; (80052a0 <xTaskResumeAll+0x118>)
 80051c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c2:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <xTaskResumeAll+0x118>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d162      	bne.n	8005290 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051ca:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <xTaskResumeAll+0x11c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d05e      	beq.n	8005290 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051d2:	e02f      	b.n	8005234 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d4:	4b34      	ldr	r3, [pc, #208]	; (80052a8 <xTaskResumeAll+0x120>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3318      	adds	r3, #24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff f871 	bl	80042c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff f86c 	bl	80042c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f4:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <xTaskResumeAll+0x124>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d903      	bls.n	8005204 <xTaskResumeAll+0x7c>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	4a2a      	ldr	r2, [pc, #168]	; (80052ac <xTaskResumeAll+0x124>)
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <xTaskResumeAll+0x128>)
 8005212:	441a      	add	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f7fe fff7 	bl	800420e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4b23      	ldr	r3, [pc, #140]	; (80052b4 <xTaskResumeAll+0x12c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800522e:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <xTaskResumeAll+0x130>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005234:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <xTaskResumeAll+0x120>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1cb      	bne.n	80051d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005242:	f000 fb55 	bl	80058f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <xTaskResumeAll+0x134>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d010      	beq.n	8005274 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005252:	f000 f847 	bl	80052e4 <xTaskIncrementTick>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800525c:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <xTaskResumeAll+0x130>)
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3b01      	subs	r3, #1
 8005266:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f1      	bne.n	8005252 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800526e:	4b13      	ldr	r3, [pc, #76]	; (80052bc <xTaskResumeAll+0x134>)
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <xTaskResumeAll+0x130>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d009      	beq.n	8005290 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005280:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <xTaskResumeAll+0x138>)
 8005282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005290:	f001 f8d8 	bl	8006444 <vPortExitCritical>

	return xAlreadyYielded;
 8005294:	68bb      	ldr	r3, [r7, #8]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000f74 	.word	0x20000f74
 80052a4:	20000f4c 	.word	0x20000f4c
 80052a8:	20000f0c 	.word	0x20000f0c
 80052ac:	20000f54 	.word	0x20000f54
 80052b0:	20000a7c 	.word	0x20000a7c
 80052b4:	20000a78 	.word	0x20000a78
 80052b8:	20000f60 	.word	0x20000f60
 80052bc:	20000f5c 	.word	0x20000f5c
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <xTaskGetTickCount+0x1c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052d0:	687b      	ldr	r3, [r7, #4]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000f50 	.word	0x20000f50

080052e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ee:	4b4f      	ldr	r3, [pc, #316]	; (800542c <xTaskIncrementTick+0x148>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f040 808f 	bne.w	8005416 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052f8:	4b4d      	ldr	r3, [pc, #308]	; (8005430 <xTaskIncrementTick+0x14c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005300:	4a4b      	ldr	r2, [pc, #300]	; (8005430 <xTaskIncrementTick+0x14c>)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d120      	bne.n	800534e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800530c:	4b49      	ldr	r3, [pc, #292]	; (8005434 <xTaskIncrementTick+0x150>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <xTaskIncrementTick+0x48>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	603b      	str	r3, [r7, #0]
}
 8005328:	bf00      	nop
 800532a:	e7fe      	b.n	800532a <xTaskIncrementTick+0x46>
 800532c:	4b41      	ldr	r3, [pc, #260]	; (8005434 <xTaskIncrementTick+0x150>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	4b41      	ldr	r3, [pc, #260]	; (8005438 <xTaskIncrementTick+0x154>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a3f      	ldr	r2, [pc, #252]	; (8005434 <xTaskIncrementTick+0x150>)
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4a3f      	ldr	r2, [pc, #252]	; (8005438 <xTaskIncrementTick+0x154>)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	4b3e      	ldr	r3, [pc, #248]	; (800543c <xTaskIncrementTick+0x158>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	4a3d      	ldr	r2, [pc, #244]	; (800543c <xTaskIncrementTick+0x158>)
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	f000 fad1 	bl	80058f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800534e:	4b3c      	ldr	r3, [pc, #240]	; (8005440 <xTaskIncrementTick+0x15c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	429a      	cmp	r2, r3
 8005356:	d349      	bcc.n	80053ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005358:	4b36      	ldr	r3, [pc, #216]	; (8005434 <xTaskIncrementTick+0x150>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005362:	4b37      	ldr	r3, [pc, #220]	; (8005440 <xTaskIncrementTick+0x15c>)
 8005364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005368:	601a      	str	r2, [r3, #0]
					break;
 800536a:	e03f      	b.n	80053ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800536c:	4b31      	ldr	r3, [pc, #196]	; (8005434 <xTaskIncrementTick+0x150>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	429a      	cmp	r2, r3
 8005382:	d203      	bcs.n	800538c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005384:	4a2e      	ldr	r2, [pc, #184]	; (8005440 <xTaskIncrementTick+0x15c>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800538a:	e02f      	b.n	80053ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	3304      	adds	r3, #4
 8005390:	4618      	mov	r0, r3
 8005392:	f7fe ff99 	bl	80042c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	2b00      	cmp	r3, #0
 800539c:	d004      	beq.n	80053a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	3318      	adds	r3, #24
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe ff90 	bl	80042c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	4b25      	ldr	r3, [pc, #148]	; (8005444 <xTaskIncrementTick+0x160>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <xTaskIncrementTick+0xd8>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	4a22      	ldr	r2, [pc, #136]	; (8005444 <xTaskIncrementTick+0x160>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a1f      	ldr	r2, [pc, #124]	; (8005448 <xTaskIncrementTick+0x164>)
 80053ca:	441a      	add	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7fe ff1b 	bl	800420e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <xTaskIncrementTick+0x168>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d3b8      	bcc.n	8005358 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80053e6:	2301      	movs	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ea:	e7b5      	b.n	8005358 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053ec:	4b17      	ldr	r3, [pc, #92]	; (800544c <xTaskIncrementTick+0x168>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f2:	4915      	ldr	r1, [pc, #84]	; (8005448 <xTaskIncrementTick+0x164>)
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d901      	bls.n	8005408 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005408:	4b11      	ldr	r3, [pc, #68]	; (8005450 <xTaskIncrementTick+0x16c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005410:	2301      	movs	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e004      	b.n	8005420 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <xTaskIncrementTick+0x170>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3301      	adds	r3, #1
 800541c:	4a0d      	ldr	r2, [pc, #52]	; (8005454 <xTaskIncrementTick+0x170>)
 800541e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005420:	697b      	ldr	r3, [r7, #20]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000f74 	.word	0x20000f74
 8005430:	20000f50 	.word	0x20000f50
 8005434:	20000f04 	.word	0x20000f04
 8005438:	20000f08 	.word	0x20000f08
 800543c:	20000f64 	.word	0x20000f64
 8005440:	20000f6c 	.word	0x20000f6c
 8005444:	20000f54 	.word	0x20000f54
 8005448:	20000a7c 	.word	0x20000a7c
 800544c:	20000a78 	.word	0x20000a78
 8005450:	20000f60 	.word	0x20000f60
 8005454:	20000f5c 	.word	0x20000f5c

08005458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800545e:	4b28      	ldr	r3, [pc, #160]	; (8005500 <vTaskSwitchContext+0xa8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005466:	4b27      	ldr	r3, [pc, #156]	; (8005504 <vTaskSwitchContext+0xac>)
 8005468:	2201      	movs	r2, #1
 800546a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800546c:	e041      	b.n	80054f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800546e:	4b25      	ldr	r3, [pc, #148]	; (8005504 <vTaskSwitchContext+0xac>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005474:	4b24      	ldr	r3, [pc, #144]	; (8005508 <vTaskSwitchContext+0xb0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e010      	b.n	800549e <vTaskSwitchContext+0x46>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <vTaskSwitchContext+0x40>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	607b      	str	r3, [r7, #4]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <vTaskSwitchContext+0x3e>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3b01      	subs	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	491b      	ldr	r1, [pc, #108]	; (800550c <vTaskSwitchContext+0xb4>)
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0e4      	beq.n	800547c <vTaskSwitchContext+0x24>
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <vTaskSwitchContext+0xb4>)
 80054be:	4413      	add	r3, r2
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	3308      	adds	r3, #8
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d104      	bne.n	80054e2 <vTaskSwitchContext+0x8a>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4a09      	ldr	r2, [pc, #36]	; (8005510 <vTaskSwitchContext+0xb8>)
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	4a06      	ldr	r2, [pc, #24]	; (8005508 <vTaskSwitchContext+0xb0>)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6013      	str	r3, [r2, #0]
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000f74 	.word	0x20000f74
 8005504:	20000f60 	.word	0x20000f60
 8005508:	20000f54 	.word	0x20000f54
 800550c:	20000a7c 	.word	0x20000a7c
 8005510:	20000a78 	.word	0x20000a78

08005514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	60fb      	str	r3, [r7, #12]
}
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <vTaskPlaceOnEventList+0x44>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3318      	adds	r3, #24
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fe fe87 	bl	8004256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005548:	2101      	movs	r1, #1
 800554a:	6838      	ldr	r0, [r7, #0]
 800554c:	f000 fa7c 	bl	8005a48 <prvAddCurrentTaskToDelayedList>
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000a78 	.word	0x20000a78

0800555c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	617b      	str	r3, [r7, #20]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005584:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3318      	adds	r3, #24
 800558a:	4619      	mov	r1, r3
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7fe fe3e 	bl	800420e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800559c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	68b8      	ldr	r0, [r7, #8]
 80055a2:	f000 fa51 	bl	8005a48 <prvAddCurrentTaskToDelayedList>
	}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000a78 	.word	0x20000a78

080055b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	60fb      	str	r3, [r7, #12]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	3318      	adds	r3, #24
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fe fe6f 	bl	80042c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ea:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <xTaskRemoveFromEventList+0xb0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d11d      	bne.n	800562e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fe fe66 	bl	80042c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005600:	4b19      	ldr	r3, [pc, #100]	; (8005668 <xTaskRemoveFromEventList+0xb4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d903      	bls.n	8005610 <xTaskRemoveFromEventList+0x5c>
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <xTaskRemoveFromEventList+0xb4>)
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4a13      	ldr	r2, [pc, #76]	; (800566c <xTaskRemoveFromEventList+0xb8>)
 800561e:	441a      	add	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	3304      	adds	r3, #4
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f7fe fdf1 	bl	800420e <vListInsertEnd>
 800562c:	e005      	b.n	800563a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	3318      	adds	r3, #24
 8005632:	4619      	mov	r1, r3
 8005634:	480e      	ldr	r0, [pc, #56]	; (8005670 <xTaskRemoveFromEventList+0xbc>)
 8005636:	f7fe fdea 	bl	800420e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <xTaskRemoveFromEventList+0xc0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	429a      	cmp	r2, r3
 8005646:	d905      	bls.n	8005654 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005648:	2301      	movs	r3, #1
 800564a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <xTaskRemoveFromEventList+0xc4>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e001      	b.n	8005658 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005658:	697b      	ldr	r3, [r7, #20]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000f74 	.word	0x20000f74
 8005668:	20000f54 	.word	0x20000f54
 800566c:	20000a7c 	.word	0x20000a7c
 8005670:	20000f0c 	.word	0x20000f0c
 8005674:	20000a78 	.word	0x20000a78
 8005678:	20000f60 	.word	0x20000f60

0800567c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <vTaskInternalSetTimeOutState+0x24>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <vTaskInternalSetTimeOutState+0x28>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	605a      	str	r2, [r3, #4]
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	20000f64 	.word	0x20000f64
 80056a4:	20000f50 	.word	0x20000f50

080056a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	613b      	str	r3, [r7, #16]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	60fb      	str	r3, [r7, #12]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056ea:	f000 fe7b 	bl	80063e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056ee:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <xTaskCheckForTimeOut+0xbc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005706:	d102      	bne.n	800570e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e023      	b.n	8005756 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <xTaskCheckForTimeOut+0xc0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d007      	beq.n	800572a <xTaskCheckForTimeOut+0x82>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	e015      	b.n	8005756 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	429a      	cmp	r2, r3
 8005732:	d20b      	bcs.n	800574c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ff9b 	bl	800567c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
 800574a:	e004      	b.n	8005756 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005752:	2301      	movs	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005756:	f000 fe75 	bl	8006444 <vPortExitCritical>

	return xReturn;
 800575a:	69fb      	ldr	r3, [r7, #28]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3720      	adds	r7, #32
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000f50 	.word	0x20000f50
 8005768:	20000f64 	.word	0x20000f64

0800576c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005770:	4b03      	ldr	r3, [pc, #12]	; (8005780 <vTaskMissedYield+0x14>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]
}
 8005776:	bf00      	nop
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000f60 	.word	0x20000f60

08005784 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800578c:	f000 f852 	bl	8005834 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005790:	4b06      	ldr	r3, [pc, #24]	; (80057ac <prvIdleTask+0x28>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d9f9      	bls.n	800578c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <prvIdleTask+0x2c>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057a8:	e7f0      	b.n	800578c <prvIdleTask+0x8>
 80057aa:	bf00      	nop
 80057ac:	20000a7c 	.word	0x20000a7c
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	e00c      	b.n	80057da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4a12      	ldr	r2, [pc, #72]	; (8005814 <prvInitialiseTaskLists+0x60>)
 80057cc:	4413      	add	r3, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fcf0 	bl	80041b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3301      	adds	r3, #1
 80057d8:	607b      	str	r3, [r7, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b37      	cmp	r3, #55	; 0x37
 80057de:	d9ef      	bls.n	80057c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057e0:	480d      	ldr	r0, [pc, #52]	; (8005818 <prvInitialiseTaskLists+0x64>)
 80057e2:	f7fe fce7 	bl	80041b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057e6:	480d      	ldr	r0, [pc, #52]	; (800581c <prvInitialiseTaskLists+0x68>)
 80057e8:	f7fe fce4 	bl	80041b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057ec:	480c      	ldr	r0, [pc, #48]	; (8005820 <prvInitialiseTaskLists+0x6c>)
 80057ee:	f7fe fce1 	bl	80041b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057f2:	480c      	ldr	r0, [pc, #48]	; (8005824 <prvInitialiseTaskLists+0x70>)
 80057f4:	f7fe fcde 	bl	80041b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057f8:	480b      	ldr	r0, [pc, #44]	; (8005828 <prvInitialiseTaskLists+0x74>)
 80057fa:	f7fe fcdb 	bl	80041b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <prvInitialiseTaskLists+0x78>)
 8005800:	4a05      	ldr	r2, [pc, #20]	; (8005818 <prvInitialiseTaskLists+0x64>)
 8005802:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <prvInitialiseTaskLists+0x7c>)
 8005806:	4a05      	ldr	r2, [pc, #20]	; (800581c <prvInitialiseTaskLists+0x68>)
 8005808:	601a      	str	r2, [r3, #0]
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000a7c 	.word	0x20000a7c
 8005818:	20000edc 	.word	0x20000edc
 800581c:	20000ef0 	.word	0x20000ef0
 8005820:	20000f0c 	.word	0x20000f0c
 8005824:	20000f20 	.word	0x20000f20
 8005828:	20000f38 	.word	0x20000f38
 800582c:	20000f04 	.word	0x20000f04
 8005830:	20000f08 	.word	0x20000f08

08005834 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800583a:	e019      	b.n	8005870 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800583c:	f000 fdd2 	bl	80063e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005840:	4b10      	ldr	r3, [pc, #64]	; (8005884 <prvCheckTasksWaitingTermination+0x50>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4618      	mov	r0, r3
 800584e:	f7fe fd3b 	bl	80042c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <prvCheckTasksWaitingTermination+0x54>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3b01      	subs	r3, #1
 8005858:	4a0b      	ldr	r2, [pc, #44]	; (8005888 <prvCheckTasksWaitingTermination+0x54>)
 800585a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <prvCheckTasksWaitingTermination+0x58>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3b01      	subs	r3, #1
 8005862:	4a0a      	ldr	r2, [pc, #40]	; (800588c <prvCheckTasksWaitingTermination+0x58>)
 8005864:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005866:	f000 fded 	bl	8006444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f810 	bl	8005890 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <prvCheckTasksWaitingTermination+0x58>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e1      	bne.n	800583c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000f20 	.word	0x20000f20
 8005888:	20000f4c 	.word	0x20000f4c
 800588c:	20000f34 	.word	0x20000f34

08005890 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d108      	bne.n	80058b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 ff8a 	bl	80067c0 <vPortFree>
				vPortFree( pxTCB );
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 ff87 	bl	80067c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058b2:	e018      	b.n	80058e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d103      	bne.n	80058c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 ff7e 	bl	80067c0 <vPortFree>
	}
 80058c4:	e00f      	b.n	80058e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d00a      	beq.n	80058e6 <prvDeleteTCB+0x56>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <prvDeleteTCB+0x54>
	}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <prvResetNextTaskUnblockTime+0x38>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <prvResetNextTaskUnblockTime+0x3c>)
 8005902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005908:	e008      	b.n	800591c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800590a:	4b07      	ldr	r3, [pc, #28]	; (8005928 <prvResetNextTaskUnblockTime+0x38>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	4a04      	ldr	r2, [pc, #16]	; (800592c <prvResetNextTaskUnblockTime+0x3c>)
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	20000f04 	.word	0x20000f04
 800592c:	20000f6c 	.word	0x20000f6c

08005930 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <xTaskGetSchedulerState+0x34>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800593e:	2301      	movs	r3, #1
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	e008      	b.n	8005956 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005944:	4b08      	ldr	r3, [pc, #32]	; (8005968 <xTaskGetSchedulerState+0x38>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800594c:	2302      	movs	r3, #2
 800594e:	607b      	str	r3, [r7, #4]
 8005950:	e001      	b.n	8005956 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005956:	687b      	ldr	r3, [r7, #4]
	}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	20000f58 	.word	0x20000f58
 8005968:	20000f74 	.word	0x20000f74

0800596c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d056      	beq.n	8005a30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005982:	4b2e      	ldr	r3, [pc, #184]	; (8005a3c <xTaskPriorityDisinherit+0xd0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	429a      	cmp	r2, r3
 800598a:	d00a      	beq.n	80059a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	60fb      	str	r3, [r7, #12]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	60bb      	str	r3, [r7, #8]
}
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d02c      	beq.n	8005a30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d128      	bne.n	8005a30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fc70 	bl	80042c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a00:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <xTaskPriorityDisinherit+0xd4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d903      	bls.n	8005a10 <xTaskPriorityDisinherit+0xa4>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <xTaskPriorityDisinherit+0xd4>)
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <xTaskPriorityDisinherit+0xd8>)
 8005a1e:	441a      	add	r2, r3
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f7fe fbf1 	bl	800420e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a30:	697b      	ldr	r3, [r7, #20]
	}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000a78 	.word	0x20000a78
 8005a40:	20000f54 	.word	0x20000f54
 8005a44:	20000a7c 	.word	0x20000a7c

08005a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a52:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a58:	4b20      	ldr	r3, [pc, #128]	; (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe fc32 	bl	80042c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a6a:	d10a      	bne.n	8005a82 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a72:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4819      	ldr	r0, [pc, #100]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a7c:	f7fe fbc7 	bl	800420e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a80:	e026      	b.n	8005ad0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d209      	bcs.n	8005aae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f7fe fbd5 	bl	8004256 <vListInsert>
}
 8005aac:	e010      	b.n	8005ad0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aae:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f7fe fbcb 	bl	8004256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d202      	bcs.n	8005ad0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005aca:	4a08      	ldr	r2, [pc, #32]	; (8005aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6013      	str	r3, [r2, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000f50 	.word	0x20000f50
 8005adc:	20000a78 	.word	0x20000a78
 8005ae0:	20000f38 	.word	0x20000f38
 8005ae4:	20000f08 	.word	0x20000f08
 8005ae8:	20000f04 	.word	0x20000f04
 8005aec:	20000f6c 	.word	0x20000f6c

08005af0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005afa:	f000 fb07 	bl	800610c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <xTimerCreateTimerTask+0x80>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d021      	beq.n	8005b4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b0e:	1d3a      	adds	r2, r7, #4
 8005b10:	f107 0108 	add.w	r1, r7, #8
 8005b14:	f107 030c 	add.w	r3, r7, #12
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe fb31 	bl	8004180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	9202      	str	r2, [sp, #8]
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	2302      	movs	r3, #2
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	460a      	mov	r2, r1
 8005b30:	4910      	ldr	r1, [pc, #64]	; (8005b74 <xTimerCreateTimerTask+0x84>)
 8005b32:	4811      	ldr	r0, [pc, #68]	; (8005b78 <xTimerCreateTimerTask+0x88>)
 8005b34:	f7ff f8de 	bl	8004cf4 <xTaskCreateStatic>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	4a10      	ldr	r2, [pc, #64]	; (8005b7c <xTimerCreateTimerTask+0x8c>)
 8005b3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <xTimerCreateTimerTask+0x8c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b46:	2301      	movs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	613b      	str	r3, [r7, #16]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b66:	697b      	ldr	r3, [r7, #20]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000fa8 	.word	0x20000fa8
 8005b74:	08007368 	.word	0x08007368
 8005b78:	08005cb5 	.word	0x08005cb5
 8005b7c:	20000fac 	.word	0x20000fac

08005b80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <xTimerGenericCommand+0x2e>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	623b      	str	r3, [r7, #32]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bae:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <xTimerGenericCommand+0x98>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d02a      	beq.n	8005c0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b05      	cmp	r3, #5
 8005bc6:	dc18      	bgt.n	8005bfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bc8:	f7ff feb2 	bl	8005930 <xTaskGetSchedulerState>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d109      	bne.n	8005be6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bd2:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <xTimerGenericCommand+0x98>)
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	f107 0110 	add.w	r1, r7, #16
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bde:	f7fe fca1 	bl	8004524 <xQueueGenericSend>
 8005be2:	6278      	str	r0, [r7, #36]	; 0x24
 8005be4:	e012      	b.n	8005c0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <xTimerGenericCommand+0x98>)
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	f107 0110 	add.w	r1, r7, #16
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f7fe fc97 	bl	8004524 <xQueueGenericSend>
 8005bf6:	6278      	str	r0, [r7, #36]	; 0x24
 8005bf8:	e008      	b.n	8005c0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <xTimerGenericCommand+0x98>)
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	f107 0110 	add.w	r1, r7, #16
 8005c02:	2300      	movs	r3, #0
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	f7fe fd8b 	bl	8004720 <xQueueGenericSendFromISR>
 8005c0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3728      	adds	r7, #40	; 0x28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000fa8 	.word	0x20000fa8

08005c1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c26:	4b22      	ldr	r3, [pc, #136]	; (8005cb0 <prvProcessExpiredTimer+0x94>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe fb47 	bl	80042c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d022      	beq.n	8005c8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	699a      	ldr	r2, [r3, #24]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	18d1      	adds	r1, r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	6978      	ldr	r0, [r7, #20]
 8005c56:	f000 f8d1 	bl	8005dfc <prvInsertTimerInActiveList>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01f      	beq.n	8005ca0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c60:	2300      	movs	r3, #0
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2300      	movs	r3, #0
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	2100      	movs	r1, #0
 8005c6a:	6978      	ldr	r0, [r7, #20]
 8005c6c:	f7ff ff88 	bl	8005b80 <xTimerGenericCommand>
 8005c70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d113      	bne.n	8005ca0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	60fb      	str	r3, [r7, #12]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c94:	f023 0301 	bic.w	r3, r3, #1
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	6978      	ldr	r0, [r7, #20]
 8005ca6:	4798      	blx	r3
}
 8005ca8:	bf00      	nop
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20000fa0 	.word	0x20000fa0

08005cb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cbc:	f107 0308 	add.w	r3, r7, #8
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 f857 	bl	8005d74 <prvGetNextExpireTime>
 8005cc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f803 	bl	8005cd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cd2:	f000 f8d5 	bl	8005e80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cd6:	e7f1      	b.n	8005cbc <prvTimerTask+0x8>

08005cd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ce2:	f7ff fa43 	bl	800516c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ce6:	f107 0308 	add.w	r3, r7, #8
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f866 	bl	8005dbc <prvSampleTimeNow>
 8005cf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d130      	bne.n	8005d5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <prvProcessTimerOrBlockTask+0x3c>
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d806      	bhi.n	8005d14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d06:	f7ff fa3f 	bl	8005188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ff85 	bl	8005c1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d12:	e024      	b.n	8005d5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <prvProcessTimerOrBlockTask+0x90>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <prvProcessTimerOrBlockTask+0x50>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <prvProcessTimerOrBlockTask+0x52>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <prvProcessTimerOrBlockTask+0x94>)
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	f7fe ffa7 	bl	8004c8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d3e:	f7ff fa23 	bl	8005188 <xTaskResumeAll>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d48:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <prvProcessTimerOrBlockTask+0x98>)
 8005d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	f3bf 8f6f 	isb	sy
}
 8005d58:	e001      	b.n	8005d5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d5a:	f7ff fa15 	bl	8005188 <xTaskResumeAll>
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000fa4 	.word	0x20000fa4
 8005d6c:	20000fa8 	.word	0x20000fa8
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <prvGetNextExpireTime+0x44>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <prvGetNextExpireTime+0x16>
 8005d86:	2201      	movs	r2, #1
 8005d88:	e000      	b.n	8005d8c <prvGetNextExpireTime+0x18>
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d105      	bne.n	8005da4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <prvGetNextExpireTime+0x44>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e001      	b.n	8005da8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005da8:	68fb      	ldr	r3, [r7, #12]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20000fa0 	.word	0x20000fa0

08005dbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005dc4:	f7ff fa7e 	bl	80052c4 <xTaskGetTickCount>
 8005dc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <prvSampleTimeNow+0x3c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d205      	bcs.n	8005de0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005dd4:	f000 f936 	bl	8006044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e002      	b.n	8005de6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005de6:	4a04      	ldr	r2, [pc, #16]	; (8005df8 <prvSampleTimeNow+0x3c>)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000fb0 	.word	0x20000fb0

08005dfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d812      	bhi.n	8005e48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	1ad2      	subs	r2, r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d302      	bcc.n	8005e36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	e01b      	b.n	8005e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e36:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <prvInsertTimerInActiveList+0x7c>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f7fe fa08 	bl	8004256 <vListInsert>
 8005e46:	e012      	b.n	8005e6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d206      	bcs.n	8005e5e <prvInsertTimerInActiveList+0x62>
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d302      	bcc.n	8005e5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e007      	b.n	8005e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e5e:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <prvInsertTimerInActiveList+0x80>)
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f7fe f9f4 	bl	8004256 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e6e:	697b      	ldr	r3, [r7, #20]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000fa4 	.word	0x20000fa4
 8005e7c:	20000fa0 	.word	0x20000fa0

08005e80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08e      	sub	sp, #56	; 0x38
 8005e84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e86:	e0ca      	b.n	800601e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	da18      	bge.n	8005ec0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e8e:	1d3b      	adds	r3, r7, #4
 8005e90:	3304      	adds	r3, #4
 8005e92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	61fb      	str	r3, [r7, #28]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eb6:	6850      	ldr	r0, [r2, #4]
 8005eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eba:	6892      	ldr	r2, [r2, #8]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f2c0 80aa 	blt.w	800601c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe f9f5 	bl	80042c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ede:	463b      	mov	r3, r7
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff ff6b 	bl	8005dbc <prvSampleTimeNow>
 8005ee6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b09      	cmp	r3, #9
 8005eec:	f200 8097 	bhi.w	800601e <prvProcessReceivedCommands+0x19e>
 8005ef0:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <prvProcessReceivedCommands+0x78>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f21 	.word	0x08005f21
 8005f04:	08005f95 	.word	0x08005f95
 8005f08:	08005fa9 	.word	0x08005fa9
 8005f0c:	08005ff3 	.word	0x08005ff3
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f21 	.word	0x08005f21
 8005f18:	08005f95 	.word	0x08005f95
 8005f1c:	08005fa9 	.word	0x08005fa9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	18d1      	adds	r1, r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f40:	f7ff ff5c 	bl	8005dfc <prvInsertTimerInActiveList>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d069      	beq.n	800601e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d05e      	beq.n	800601e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	441a      	add	r2, r3
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	2100      	movs	r1, #0
 8005f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f72:	f7ff fe05 	bl	8005b80 <xTimerGenericCommand>
 8005f76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d14f      	bne.n	800601e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	61bb      	str	r3, [r7, #24]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005fa6:	e03a      	b.n	800601e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	617b      	str	r3, [r7, #20]
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	18d1      	adds	r1, r2, r3
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fec:	f7ff ff06 	bl	8005dfc <prvInsertTimerInActiveList>
					break;
 8005ff0:	e015      	b.n	800601e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006002:	f000 fbdd 	bl	80067c0 <vPortFree>
 8006006:	e00a      	b.n	800601e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800600e:	f023 0301 	bic.w	r3, r3, #1
 8006012:	b2da      	uxtb	r2, r3
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800601a:	e000      	b.n	800601e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800601c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800601e:	4b08      	ldr	r3, [pc, #32]	; (8006040 <prvProcessReceivedCommands+0x1c0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	1d39      	adds	r1, r7, #4
 8006024:	2200      	movs	r2, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fc16 	bl	8004858 <xQueueReceive>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	f47f af2a 	bne.w	8005e88 <prvProcessReceivedCommands+0x8>
	}
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	3730      	adds	r7, #48	; 0x30
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000fa8 	.word	0x20000fa8

08006044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800604a:	e048      	b.n	80060de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800604c:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <prvSwitchTimerLists+0xc0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006056:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <prvSwitchTimerLists+0xc0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3304      	adds	r3, #4
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe f92f 	bl	80042c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d02e      	beq.n	80060de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	429a      	cmp	r2, r3
 8006090:	d90e      	bls.n	80060b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800609e:	4b19      	ldr	r3, [pc, #100]	; (8006104 <prvSwitchTimerLists+0xc0>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fe f8d4 	bl	8004256 <vListInsert>
 80060ae:	e016      	b.n	80060de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060b0:	2300      	movs	r3, #0
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	2300      	movs	r3, #0
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	2100      	movs	r1, #0
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f7ff fd60 	bl	8005b80 <xTimerGenericCommand>
 80060c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	603b      	str	r3, [r7, #0]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060de:	4b09      	ldr	r3, [pc, #36]	; (8006104 <prvSwitchTimerLists+0xc0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1b1      	bne.n	800604c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <prvSwitchTimerLists+0xc0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <prvSwitchTimerLists+0xc4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a04      	ldr	r2, [pc, #16]	; (8006104 <prvSwitchTimerLists+0xc0>)
 80060f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060f6:	4a04      	ldr	r2, [pc, #16]	; (8006108 <prvSwitchTimerLists+0xc4>)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6013      	str	r3, [r2, #0]
}
 80060fc:	bf00      	nop
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000fa0 	.word	0x20000fa0
 8006108:	20000fa4 	.word	0x20000fa4

0800610c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006112:	f000 f967 	bl	80063e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006116:	4b15      	ldr	r3, [pc, #84]	; (800616c <prvCheckForValidListAndQueue+0x60>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d120      	bne.n	8006160 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800611e:	4814      	ldr	r0, [pc, #80]	; (8006170 <prvCheckForValidListAndQueue+0x64>)
 8006120:	f7fe f848 	bl	80041b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006124:	4813      	ldr	r0, [pc, #76]	; (8006174 <prvCheckForValidListAndQueue+0x68>)
 8006126:	f7fe f845 	bl	80041b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <prvCheckForValidListAndQueue+0x6c>)
 800612c:	4a10      	ldr	r2, [pc, #64]	; (8006170 <prvCheckForValidListAndQueue+0x64>)
 800612e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <prvCheckForValidListAndQueue+0x70>)
 8006132:	4a10      	ldr	r2, [pc, #64]	; (8006174 <prvCheckForValidListAndQueue+0x68>)
 8006134:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006136:	2300      	movs	r3, #0
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <prvCheckForValidListAndQueue+0x74>)
 800613c:	4a11      	ldr	r2, [pc, #68]	; (8006184 <prvCheckForValidListAndQueue+0x78>)
 800613e:	2110      	movs	r1, #16
 8006140:	200a      	movs	r0, #10
 8006142:	f7fe f953 	bl	80043ec <xQueueGenericCreateStatic>
 8006146:	4603      	mov	r3, r0
 8006148:	4a08      	ldr	r2, [pc, #32]	; (800616c <prvCheckForValidListAndQueue+0x60>)
 800614a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800614c:	4b07      	ldr	r3, [pc, #28]	; (800616c <prvCheckForValidListAndQueue+0x60>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <prvCheckForValidListAndQueue+0x60>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	490b      	ldr	r1, [pc, #44]	; (8006188 <prvCheckForValidListAndQueue+0x7c>)
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fd6c 	bl	8004c38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006160:	f000 f970 	bl	8006444 <vPortExitCritical>
}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000fa8 	.word	0x20000fa8
 8006170:	20000f78 	.word	0x20000f78
 8006174:	20000f8c 	.word	0x20000f8c
 8006178:	20000fa0 	.word	0x20000fa0
 800617c:	20000fa4 	.word	0x20000fa4
 8006180:	20001054 	.word	0x20001054
 8006184:	20000fb4 	.word	0x20000fb4
 8006188:	08007370 	.word	0x08007370

0800618c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3b04      	subs	r3, #4
 800619c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3b04      	subs	r3, #4
 80061aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3b04      	subs	r3, #4
 80061ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061bc:	4a0c      	ldr	r2, [pc, #48]	; (80061f0 <pxPortInitialiseStack+0x64>)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3b14      	subs	r3, #20
 80061c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f06f 0202 	mvn.w	r2, #2
 80061da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3b20      	subs	r3, #32
 80061e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061e2:	68fb      	ldr	r3, [r7, #12]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	080061f5 	.word	0x080061f5

080061f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061fe:	4b12      	ldr	r3, [pc, #72]	; (8006248 <prvTaskExitError+0x54>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006206:	d00a      	beq.n	800621e <prvTaskExitError+0x2a>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	60fb      	str	r3, [r7, #12]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <prvTaskExitError+0x28>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	60bb      	str	r3, [r7, #8]
}
 8006230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006232:	bf00      	nop
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0fc      	beq.n	8006234 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	2000000c 	.word	0x2000000c
 800624c:	00000000 	.word	0x00000000

08006250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <pxCurrentTCBConst2>)
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	6808      	ldr	r0, [r1, #0]
 8006256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	f380 8809 	msr	PSP, r0
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f04f 0000 	mov.w	r0, #0
 8006266:	f380 8811 	msr	BASEPRI, r0
 800626a:	4770      	bx	lr
 800626c:	f3af 8000 	nop.w

08006270 <pxCurrentTCBConst2>:
 8006270:	20000a78 	.word	0x20000a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop

08006278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006278:	4808      	ldr	r0, [pc, #32]	; (800629c <prvPortStartFirstTask+0x24>)
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	6800      	ldr	r0, [r0, #0]
 800627e:	f380 8808 	msr	MSP, r0
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8814 	msr	CONTROL, r0
 800628a:	b662      	cpsie	i
 800628c:	b661      	cpsie	f
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	df00      	svc	0
 8006298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800629a:	bf00      	nop
 800629c:	e000ed08 	.word	0xe000ed08

080062a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062a6:	4b46      	ldr	r3, [pc, #280]	; (80063c0 <xPortStartScheduler+0x120>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a46      	ldr	r2, [pc, #280]	; (80063c4 <xPortStartScheduler+0x124>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10a      	bne.n	80062c6 <xPortStartScheduler+0x26>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	613b      	str	r3, [r7, #16]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062c6:	4b3e      	ldr	r3, [pc, #248]	; (80063c0 <xPortStartScheduler+0x120>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a3f      	ldr	r2, [pc, #252]	; (80063c8 <xPortStartScheduler+0x128>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10a      	bne.n	80062e6 <xPortStartScheduler+0x46>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	60fb      	str	r3, [r7, #12]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062e6:	4b39      	ldr	r3, [pc, #228]	; (80063cc <xPortStartScheduler+0x12c>)
 80062e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	22ff      	movs	r2, #255	; 0xff
 80062f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006308:	b2da      	uxtb	r2, r3
 800630a:	4b31      	ldr	r3, [pc, #196]	; (80063d0 <xPortStartScheduler+0x130>)
 800630c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800630e:	4b31      	ldr	r3, [pc, #196]	; (80063d4 <xPortStartScheduler+0x134>)
 8006310:	2207      	movs	r2, #7
 8006312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006314:	e009      	b.n	800632a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006316:	4b2f      	ldr	r3, [pc, #188]	; (80063d4 <xPortStartScheduler+0x134>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3b01      	subs	r3, #1
 800631c:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <xPortStartScheduler+0x134>)
 800631e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b80      	cmp	r3, #128	; 0x80
 8006334:	d0ef      	beq.n	8006316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006336:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <xPortStartScheduler+0x134>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f1c3 0307 	rsb	r3, r3, #7
 800633e:	2b04      	cmp	r3, #4
 8006340:	d00a      	beq.n	8006358 <xPortStartScheduler+0xb8>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60bb      	str	r3, [r7, #8]
}
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <xPortStartScheduler+0x134>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <xPortStartScheduler+0x134>)
 8006360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006362:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <xPortStartScheduler+0x134>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <xPortStartScheduler+0x134>)
 800636c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006376:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <xPortStartScheduler+0x138>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <xPortStartScheduler+0x138>)
 800637c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006382:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <xPortStartScheduler+0x138>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a14      	ldr	r2, [pc, #80]	; (80063d8 <xPortStartScheduler+0x138>)
 8006388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800638c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800638e:	f000 f8dd 	bl	800654c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006392:	4b12      	ldr	r3, [pc, #72]	; (80063dc <xPortStartScheduler+0x13c>)
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006398:	f000 f8fc 	bl	8006594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <xPortStartScheduler+0x140>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0f      	ldr	r2, [pc, #60]	; (80063e0 <xPortStartScheduler+0x140>)
 80063a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063a8:	f7ff ff66 	bl	8006278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063ac:	f7ff f854 	bl	8005458 <vTaskSwitchContext>
	prvTaskExitError();
 80063b0:	f7ff ff20 	bl	80061f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	e000ed00 	.word	0xe000ed00
 80063c4:	410fc271 	.word	0x410fc271
 80063c8:	410fc270 	.word	0x410fc270
 80063cc:	e000e400 	.word	0xe000e400
 80063d0:	200010a4 	.word	0x200010a4
 80063d4:	200010a8 	.word	0x200010a8
 80063d8:	e000ed20 	.word	0xe000ed20
 80063dc:	2000000c 	.word	0x2000000c
 80063e0:	e000ef34 	.word	0xe000ef34

080063e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	607b      	str	r3, [r7, #4]
}
 80063fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063fe:	4b0f      	ldr	r3, [pc, #60]	; (800643c <vPortEnterCritical+0x58>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	4a0d      	ldr	r2, [pc, #52]	; (800643c <vPortEnterCritical+0x58>)
 8006406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006408:	4b0c      	ldr	r3, [pc, #48]	; (800643c <vPortEnterCritical+0x58>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d10f      	bne.n	8006430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <vPortEnterCritical+0x5c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <vPortEnterCritical+0x4c>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	603b      	str	r3, [r7, #0]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <vPortEnterCritical+0x4a>
	}
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	2000000c 	.word	0x2000000c
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <vPortExitCritical+0x50>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <vPortExitCritical+0x24>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	607b      	str	r3, [r7, #4]
}
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <vPortExitCritical+0x50>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3b01      	subs	r3, #1
 800646e:	4a09      	ldr	r2, [pc, #36]	; (8006494 <vPortExitCritical+0x50>)
 8006470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006472:	4b08      	ldr	r3, [pc, #32]	; (8006494 <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <vPortExitCritical+0x42>
 800647a:	2300      	movs	r3, #0
 800647c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	f383 8811 	msr	BASEPRI, r3
}
 8006484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	2000000c 	.word	0x2000000c
	...

080064a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064a0:	f3ef 8009 	mrs	r0, PSP
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4b15      	ldr	r3, [pc, #84]	; (8006500 <pxCurrentTCBConst>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f01e 0f10 	tst.w	lr, #16
 80064b0:	bf08      	it	eq
 80064b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	6010      	str	r0, [r2, #0]
 80064bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064c4:	f380 8811 	msr	BASEPRI, r0
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f7fe ffc2 	bl	8005458 <vTaskSwitchContext>
 80064d4:	f04f 0000 	mov.w	r0, #0
 80064d8:	f380 8811 	msr	BASEPRI, r0
 80064dc:	bc09      	pop	{r0, r3}
 80064de:	6819      	ldr	r1, [r3, #0]
 80064e0:	6808      	ldr	r0, [r1, #0]
 80064e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e6:	f01e 0f10 	tst.w	lr, #16
 80064ea:	bf08      	it	eq
 80064ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064f0:	f380 8809 	msr	PSP, r0
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst>:
 8006500:	20000a78 	.word	0x20000a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006522:	f7fe fedf 	bl	80052e4 <xTaskIncrementTick>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800652c:	4b06      	ldr	r3, [pc, #24]	; (8006548 <xPortSysTickHandler+0x40>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f383 8811 	msr	BASEPRI, r3
}
 800653e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006556:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <vPortSetupTimerInterrupt+0x38>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <vPortSetupTimerInterrupt+0x3c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0a      	ldr	r2, [pc, #40]	; (800658c <vPortSetupTimerInterrupt+0x40>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	099b      	lsrs	r3, r3, #6
 8006568:	4a09      	ldr	r2, [pc, #36]	; (8006590 <vPortSetupTimerInterrupt+0x44>)
 800656a:	3b01      	subs	r3, #1
 800656c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800656e:	4b04      	ldr	r3, [pc, #16]	; (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006570:	2207      	movs	r2, #7
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	e000e010 	.word	0xe000e010
 8006584:	e000e018 	.word	0xe000e018
 8006588:	20000000 	.word	0x20000000
 800658c:	10624dd3 	.word	0x10624dd3
 8006590:	e000e014 	.word	0xe000e014

08006594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065a4 <vPortEnableVFP+0x10>
 8006598:	6801      	ldr	r1, [r0, #0]
 800659a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800659e:	6001      	str	r1, [r0, #0]
 80065a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065a2:	bf00      	nop
 80065a4:	e000ed88 	.word	0xe000ed88

080065a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ae:	f3ef 8305 	mrs	r3, IPSR
 80065b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	d914      	bls.n	80065e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065ba:	4a17      	ldr	r2, [pc, #92]	; (8006618 <vPortValidateInterruptPriority+0x70>)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <vPortValidateInterruptPriority+0x74>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	7afa      	ldrb	r2, [r7, #11]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d20a      	bcs.n	80065e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065e4:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <vPortValidateInterruptPriority+0x78>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065ec:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <vPortValidateInterruptPriority+0x7c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d90a      	bls.n	800660a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	603b      	str	r3, [r7, #0]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <vPortValidateInterruptPriority+0x60>
	}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	e000e3f0 	.word	0xe000e3f0
 800661c:	200010a4 	.word	0x200010a4
 8006620:	e000ed0c 	.word	0xe000ed0c
 8006624:	200010a8 	.word	0x200010a8

08006628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006630:	2300      	movs	r3, #0
 8006632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006634:	f7fe fd9a 	bl	800516c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006638:	4b5b      	ldr	r3, [pc, #364]	; (80067a8 <pvPortMalloc+0x180>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006640:	f000 f920 	bl	8006884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006644:	4b59      	ldr	r3, [pc, #356]	; (80067ac <pvPortMalloc+0x184>)
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	f040 8093 	bne.w	8006778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01d      	beq.n	8006694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006658:	2208      	movs	r2, #8
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4413      	add	r3, r2
 800665e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	2b00      	cmp	r3, #0
 8006668:	d014      	beq.n	8006694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f023 0307 	bic.w	r3, r3, #7
 8006670:	3308      	adds	r3, #8
 8006672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <pvPortMalloc+0x6c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	617b      	str	r3, [r7, #20]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d06e      	beq.n	8006778 <pvPortMalloc+0x150>
 800669a:	4b45      	ldr	r3, [pc, #276]	; (80067b0 <pvPortMalloc+0x188>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d869      	bhi.n	8006778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066a4:	4b43      	ldr	r3, [pc, #268]	; (80067b4 <pvPortMalloc+0x18c>)
 80066a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066a8:	4b42      	ldr	r3, [pc, #264]	; (80067b4 <pvPortMalloc+0x18c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ae:	e004      	b.n	80066ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d903      	bls.n	80066cc <pvPortMalloc+0xa4>
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f1      	bne.n	80066b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066cc:	4b36      	ldr	r3, [pc, #216]	; (80067a8 <pvPortMalloc+0x180>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d050      	beq.n	8006778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2208      	movs	r2, #8
 80066dc:	4413      	add	r3, r2
 80066de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	2308      	movs	r3, #8
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d91f      	bls.n	8006738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4413      	add	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <pvPortMalloc+0xf8>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	613b      	str	r3, [r7, #16]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	1ad2      	subs	r2, r2, r3
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006732:	69b8      	ldr	r0, [r7, #24]
 8006734:	f000 f908 	bl	8006948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006738:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <pvPortMalloc+0x188>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <pvPortMalloc+0x188>)
 8006744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006746:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <pvPortMalloc+0x188>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b1b      	ldr	r3, [pc, #108]	; (80067b8 <pvPortMalloc+0x190>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d203      	bcs.n	800675a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <pvPortMalloc+0x188>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <pvPortMalloc+0x190>)
 8006758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <pvPortMalloc+0x184>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	431a      	orrs	r2, r3
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <pvPortMalloc+0x194>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	4a11      	ldr	r2, [pc, #68]	; (80067bc <pvPortMalloc+0x194>)
 8006776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006778:	f7fe fd06 	bl	8005188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <pvPortMalloc+0x174>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	60fb      	str	r3, [r7, #12]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <pvPortMalloc+0x172>
	return pvReturn;
 800679c:	69fb      	ldr	r3, [r7, #28]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3728      	adds	r7, #40	; 0x28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20001c6c 	.word	0x20001c6c
 80067ac:	20001c80 	.word	0x20001c80
 80067b0:	20001c70 	.word	0x20001c70
 80067b4:	20001c64 	.word	0x20001c64
 80067b8:	20001c74 	.word	0x20001c74
 80067bc:	20001c78 	.word	0x20001c78

080067c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d04d      	beq.n	800686e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067d2:	2308      	movs	r3, #8
 80067d4:	425b      	negs	r3, r3
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	4b24      	ldr	r3, [pc, #144]	; (8006878 <vPortFree+0xb8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <vPortFree+0x44>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	60fb      	str	r3, [r7, #12]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <vPortFree+0x62>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	60bb      	str	r3, [r7, #8]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <vPortFree+0xb8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4013      	ands	r3, r2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01e      	beq.n	800686e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11a      	bne.n	800686e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <vPortFree+0xb8>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	43db      	mvns	r3, r3
 8006842:	401a      	ands	r2, r3
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006848:	f7fe fc90 	bl	800516c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	4b0a      	ldr	r3, [pc, #40]	; (800687c <vPortFree+0xbc>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4413      	add	r3, r2
 8006856:	4a09      	ldr	r2, [pc, #36]	; (800687c <vPortFree+0xbc>)
 8006858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800685a:	6938      	ldr	r0, [r7, #16]
 800685c:	f000 f874 	bl	8006948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <vPortFree+0xc0>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	4a06      	ldr	r2, [pc, #24]	; (8006880 <vPortFree+0xc0>)
 8006868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800686a:	f7fe fc8d 	bl	8005188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800686e:	bf00      	nop
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20001c80 	.word	0x20001c80
 800687c:	20001c70 	.word	0x20001c70
 8006880:	20001c7c 	.word	0x20001c7c

08006884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800688a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800688e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006890:	4b27      	ldr	r3, [pc, #156]	; (8006930 <prvHeapInit+0xac>)
 8006892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00c      	beq.n	80068b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3307      	adds	r3, #7
 80068a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0307 	bic.w	r3, r3, #7
 80068aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	4a1f      	ldr	r2, [pc, #124]	; (8006930 <prvHeapInit+0xac>)
 80068b4:	4413      	add	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068bc:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <prvHeapInit+0xb0>)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068c2:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <prvHeapInit+0xb0>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	4413      	add	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068d0:	2208      	movs	r2, #8
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0307 	bic.w	r3, r3, #7
 80068de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4a15      	ldr	r2, [pc, #84]	; (8006938 <prvHeapInit+0xb4>)
 80068e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068e6:	4b14      	ldr	r3, [pc, #80]	; (8006938 <prvHeapInit+0xb4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2200      	movs	r2, #0
 80068ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <prvHeapInit+0xb4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006904:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <prvHeapInit+0xb4>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4a0a      	ldr	r2, [pc, #40]	; (800693c <prvHeapInit+0xb8>)
 8006912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <prvHeapInit+0xbc>)
 800691a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800691c:	4b09      	ldr	r3, [pc, #36]	; (8006944 <prvHeapInit+0xc0>)
 800691e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	200010ac 	.word	0x200010ac
 8006934:	20001c64 	.word	0x20001c64
 8006938:	20001c6c 	.word	0x20001c6c
 800693c:	20001c74 	.word	0x20001c74
 8006940:	20001c70 	.word	0x20001c70
 8006944:	20001c80 	.word	0x20001c80

08006948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006950:	4b28      	ldr	r3, [pc, #160]	; (80069f4 <prvInsertBlockIntoFreeList+0xac>)
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e002      	b.n	800695c <prvInsertBlockIntoFreeList+0x14>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	429a      	cmp	r2, r3
 8006964:	d8f7      	bhi.n	8006956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4413      	add	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	d108      	bne.n	800698a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	441a      	add	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d118      	bne.n	80069d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b15      	ldr	r3, [pc, #84]	; (80069f8 <prvInsertBlockIntoFreeList+0xb0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d00d      	beq.n	80069c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	441a      	add	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	e008      	b.n	80069d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069c6:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <prvInsertBlockIntoFreeList+0xb0>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e003      	b.n	80069d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d002      	beq.n	80069e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20001c64 	.word	0x20001c64
 80069f8:	20001c6c 	.word	0x20001c6c

080069fc <__errno>:
 80069fc:	4b01      	ldr	r3, [pc, #4]	; (8006a04 <__errno+0x8>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20000010 	.word	0x20000010

08006a08 <__libc_init_array>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	4d0d      	ldr	r5, [pc, #52]	; (8006a40 <__libc_init_array+0x38>)
 8006a0c:	4c0d      	ldr	r4, [pc, #52]	; (8006a44 <__libc_init_array+0x3c>)
 8006a0e:	1b64      	subs	r4, r4, r5
 8006a10:	10a4      	asrs	r4, r4, #2
 8006a12:	2600      	movs	r6, #0
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	d109      	bne.n	8006a2c <__libc_init_array+0x24>
 8006a18:	4d0b      	ldr	r5, [pc, #44]	; (8006a48 <__libc_init_array+0x40>)
 8006a1a:	4c0c      	ldr	r4, [pc, #48]	; (8006a4c <__libc_init_array+0x44>)
 8006a1c:	f000 fc62 	bl	80072e4 <_init>
 8006a20:	1b64      	subs	r4, r4, r5
 8006a22:	10a4      	asrs	r4, r4, #2
 8006a24:	2600      	movs	r6, #0
 8006a26:	42a6      	cmp	r6, r4
 8006a28:	d105      	bne.n	8006a36 <__libc_init_array+0x2e>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a30:	4798      	blx	r3
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7ee      	b.n	8006a14 <__libc_init_array+0xc>
 8006a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3a:	4798      	blx	r3
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	e7f2      	b.n	8006a26 <__libc_init_array+0x1e>
 8006a40:	08007468 	.word	0x08007468
 8006a44:	08007468 	.word	0x08007468
 8006a48:	08007468 	.word	0x08007468
 8006a4c:	0800746c 	.word	0x0800746c

08006a50 <memcpy>:
 8006a50:	440a      	add	r2, r1
 8006a52:	4291      	cmp	r1, r2
 8006a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a58:	d100      	bne.n	8006a5c <memcpy+0xc>
 8006a5a:	4770      	bx	lr
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a66:	4291      	cmp	r1, r2
 8006a68:	d1f9      	bne.n	8006a5e <memcpy+0xe>
 8006a6a:	bd10      	pop	{r4, pc}

08006a6c <memset>:
 8006a6c:	4402      	add	r2, r0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d100      	bne.n	8006a76 <memset+0xa>
 8006a74:	4770      	bx	lr
 8006a76:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7a:	e7f9      	b.n	8006a70 <memset+0x4>

08006a7c <sniprintf>:
 8006a7c:	b40c      	push	{r2, r3}
 8006a7e:	b530      	push	{r4, r5, lr}
 8006a80:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <sniprintf+0x64>)
 8006a82:	1e0c      	subs	r4, r1, #0
 8006a84:	681d      	ldr	r5, [r3, #0]
 8006a86:	b09d      	sub	sp, #116	; 0x74
 8006a88:	da08      	bge.n	8006a9c <sniprintf+0x20>
 8006a8a:	238b      	movs	r3, #139	; 0x8b
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a92:	b01d      	add	sp, #116	; 0x74
 8006a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a98:	b002      	add	sp, #8
 8006a9a:	4770      	bx	lr
 8006a9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006aa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006aa4:	bf14      	ite	ne
 8006aa6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006aaa:	4623      	moveq	r3, r4
 8006aac:	9304      	str	r3, [sp, #16]
 8006aae:	9307      	str	r3, [sp, #28]
 8006ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ab4:	9002      	str	r0, [sp, #8]
 8006ab6:	9006      	str	r0, [sp, #24]
 8006ab8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006abc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006abe:	ab21      	add	r3, sp, #132	; 0x84
 8006ac0:	a902      	add	r1, sp, #8
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	f000 f869 	bl	8006b9c <_svfiprintf_r>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	bfbc      	itt	lt
 8006ace:	238b      	movlt	r3, #139	; 0x8b
 8006ad0:	602b      	strlt	r3, [r5, #0]
 8006ad2:	2c00      	cmp	r4, #0
 8006ad4:	d0dd      	beq.n	8006a92 <sniprintf+0x16>
 8006ad6:	9b02      	ldr	r3, [sp, #8]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
 8006adc:	e7d9      	b.n	8006a92 <sniprintf+0x16>
 8006ade:	bf00      	nop
 8006ae0:	20000010 	.word	0x20000010

08006ae4 <__ssputs_r>:
 8006ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	688e      	ldr	r6, [r1, #8]
 8006aea:	429e      	cmp	r6, r3
 8006aec:	4682      	mov	sl, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	4690      	mov	r8, r2
 8006af2:	461f      	mov	r7, r3
 8006af4:	d838      	bhi.n	8006b68 <__ssputs_r+0x84>
 8006af6:	898a      	ldrh	r2, [r1, #12]
 8006af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006afc:	d032      	beq.n	8006b64 <__ssputs_r+0x80>
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	6909      	ldr	r1, [r1, #16]
 8006b02:	eba5 0901 	sub.w	r9, r5, r1
 8006b06:	6965      	ldr	r5, [r4, #20]
 8006b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b10:	3301      	adds	r3, #1
 8006b12:	444b      	add	r3, r9
 8006b14:	106d      	asrs	r5, r5, #1
 8006b16:	429d      	cmp	r5, r3
 8006b18:	bf38      	it	cc
 8006b1a:	461d      	movcc	r5, r3
 8006b1c:	0553      	lsls	r3, r2, #21
 8006b1e:	d531      	bpl.n	8006b84 <__ssputs_r+0xa0>
 8006b20:	4629      	mov	r1, r5
 8006b22:	f000 fb39 	bl	8007198 <_malloc_r>
 8006b26:	4606      	mov	r6, r0
 8006b28:	b950      	cbnz	r0, 8006b40 <__ssputs_r+0x5c>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	f8ca 3000 	str.w	r3, [sl]
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b40:	6921      	ldr	r1, [r4, #16]
 8006b42:	464a      	mov	r2, r9
 8006b44:	f7ff ff84 	bl	8006a50 <memcpy>
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	6126      	str	r6, [r4, #16]
 8006b56:	6165      	str	r5, [r4, #20]
 8006b58:	444e      	add	r6, r9
 8006b5a:	eba5 0509 	sub.w	r5, r5, r9
 8006b5e:	6026      	str	r6, [r4, #0]
 8006b60:	60a5      	str	r5, [r4, #8]
 8006b62:	463e      	mov	r6, r7
 8006b64:	42be      	cmp	r6, r7
 8006b66:	d900      	bls.n	8006b6a <__ssputs_r+0x86>
 8006b68:	463e      	mov	r6, r7
 8006b6a:	4632      	mov	r2, r6
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	4641      	mov	r1, r8
 8006b70:	f000 faa8 	bl	80070c4 <memmove>
 8006b74:	68a3      	ldr	r3, [r4, #8]
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	1b9b      	subs	r3, r3, r6
 8006b7a:	4432      	add	r2, r6
 8006b7c:	60a3      	str	r3, [r4, #8]
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	2000      	movs	r0, #0
 8006b82:	e7db      	b.n	8006b3c <__ssputs_r+0x58>
 8006b84:	462a      	mov	r2, r5
 8006b86:	f000 fb61 	bl	800724c <_realloc_r>
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d1e1      	bne.n	8006b54 <__ssputs_r+0x70>
 8006b90:	6921      	ldr	r1, [r4, #16]
 8006b92:	4650      	mov	r0, sl
 8006b94:	f000 fab0 	bl	80070f8 <_free_r>
 8006b98:	e7c7      	b.n	8006b2a <__ssputs_r+0x46>
	...

08006b9c <_svfiprintf_r>:
 8006b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba0:	4698      	mov	r8, r3
 8006ba2:	898b      	ldrh	r3, [r1, #12]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	b09d      	sub	sp, #116	; 0x74
 8006ba8:	4607      	mov	r7, r0
 8006baa:	460d      	mov	r5, r1
 8006bac:	4614      	mov	r4, r2
 8006bae:	d50e      	bpl.n	8006bce <_svfiprintf_r+0x32>
 8006bb0:	690b      	ldr	r3, [r1, #16]
 8006bb2:	b963      	cbnz	r3, 8006bce <_svfiprintf_r+0x32>
 8006bb4:	2140      	movs	r1, #64	; 0x40
 8006bb6:	f000 faef 	bl	8007198 <_malloc_r>
 8006bba:	6028      	str	r0, [r5, #0]
 8006bbc:	6128      	str	r0, [r5, #16]
 8006bbe:	b920      	cbnz	r0, 8006bca <_svfiprintf_r+0x2e>
 8006bc0:	230c      	movs	r3, #12
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc8:	e0d1      	b.n	8006d6e <_svfiprintf_r+0x1d2>
 8006bca:	2340      	movs	r3, #64	; 0x40
 8006bcc:	616b      	str	r3, [r5, #20]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd2:	2320      	movs	r3, #32
 8006bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bdc:	2330      	movs	r3, #48	; 0x30
 8006bde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d88 <_svfiprintf_r+0x1ec>
 8006be2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006be6:	f04f 0901 	mov.w	r9, #1
 8006bea:	4623      	mov	r3, r4
 8006bec:	469a      	mov	sl, r3
 8006bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf2:	b10a      	cbz	r2, 8006bf8 <_svfiprintf_r+0x5c>
 8006bf4:	2a25      	cmp	r2, #37	; 0x25
 8006bf6:	d1f9      	bne.n	8006bec <_svfiprintf_r+0x50>
 8006bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8006bfc:	d00b      	beq.n	8006c16 <_svfiprintf_r+0x7a>
 8006bfe:	465b      	mov	r3, fp
 8006c00:	4622      	mov	r2, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	4638      	mov	r0, r7
 8006c06:	f7ff ff6d 	bl	8006ae4 <__ssputs_r>
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	f000 80aa 	beq.w	8006d64 <_svfiprintf_r+0x1c8>
 8006c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c12:	445a      	add	r2, fp
 8006c14:	9209      	str	r2, [sp, #36]	; 0x24
 8006c16:	f89a 3000 	ldrb.w	r3, [sl]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 80a2 	beq.w	8006d64 <_svfiprintf_r+0x1c8>
 8006c20:	2300      	movs	r3, #0
 8006c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c2a:	f10a 0a01 	add.w	sl, sl, #1
 8006c2e:	9304      	str	r3, [sp, #16]
 8006c30:	9307      	str	r3, [sp, #28]
 8006c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c36:	931a      	str	r3, [sp, #104]	; 0x68
 8006c38:	4654      	mov	r4, sl
 8006c3a:	2205      	movs	r2, #5
 8006c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c40:	4851      	ldr	r0, [pc, #324]	; (8006d88 <_svfiprintf_r+0x1ec>)
 8006c42:	f7f9 fac5 	bl	80001d0 <memchr>
 8006c46:	9a04      	ldr	r2, [sp, #16]
 8006c48:	b9d8      	cbnz	r0, 8006c82 <_svfiprintf_r+0xe6>
 8006c4a:	06d0      	lsls	r0, r2, #27
 8006c4c:	bf44      	itt	mi
 8006c4e:	2320      	movmi	r3, #32
 8006c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c54:	0711      	lsls	r1, r2, #28
 8006c56:	bf44      	itt	mi
 8006c58:	232b      	movmi	r3, #43	; 0x2b
 8006c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c62:	2b2a      	cmp	r3, #42	; 0x2a
 8006c64:	d015      	beq.n	8006c92 <_svfiprintf_r+0xf6>
 8006c66:	9a07      	ldr	r2, [sp, #28]
 8006c68:	4654      	mov	r4, sl
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f04f 0c0a 	mov.w	ip, #10
 8006c70:	4621      	mov	r1, r4
 8006c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c76:	3b30      	subs	r3, #48	; 0x30
 8006c78:	2b09      	cmp	r3, #9
 8006c7a:	d94e      	bls.n	8006d1a <_svfiprintf_r+0x17e>
 8006c7c:	b1b0      	cbz	r0, 8006cac <_svfiprintf_r+0x110>
 8006c7e:	9207      	str	r2, [sp, #28]
 8006c80:	e014      	b.n	8006cac <_svfiprintf_r+0x110>
 8006c82:	eba0 0308 	sub.w	r3, r0, r8
 8006c86:	fa09 f303 	lsl.w	r3, r9, r3
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	46a2      	mov	sl, r4
 8006c90:	e7d2      	b.n	8006c38 <_svfiprintf_r+0x9c>
 8006c92:	9b03      	ldr	r3, [sp, #12]
 8006c94:	1d19      	adds	r1, r3, #4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	9103      	str	r1, [sp, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bfbb      	ittet	lt
 8006c9e:	425b      	neglt	r3, r3
 8006ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ca4:	9307      	strge	r3, [sp, #28]
 8006ca6:	9307      	strlt	r3, [sp, #28]
 8006ca8:	bfb8      	it	lt
 8006caa:	9204      	strlt	r2, [sp, #16]
 8006cac:	7823      	ldrb	r3, [r4, #0]
 8006cae:	2b2e      	cmp	r3, #46	; 0x2e
 8006cb0:	d10c      	bne.n	8006ccc <_svfiprintf_r+0x130>
 8006cb2:	7863      	ldrb	r3, [r4, #1]
 8006cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb6:	d135      	bne.n	8006d24 <_svfiprintf_r+0x188>
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	1d1a      	adds	r2, r3, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	9203      	str	r2, [sp, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bfb8      	it	lt
 8006cc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cc8:	3402      	adds	r4, #2
 8006cca:	9305      	str	r3, [sp, #20]
 8006ccc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d98 <_svfiprintf_r+0x1fc>
 8006cd0:	7821      	ldrb	r1, [r4, #0]
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	f7f9 fa7b 	bl	80001d0 <memchr>
 8006cda:	b140      	cbz	r0, 8006cee <_svfiprintf_r+0x152>
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	eba0 000a 	sub.w	r0, r0, sl
 8006ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	4303      	orrs	r3, r0
 8006cea:	3401      	adds	r4, #1
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf2:	4826      	ldr	r0, [pc, #152]	; (8006d8c <_svfiprintf_r+0x1f0>)
 8006cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cf8:	2206      	movs	r2, #6
 8006cfa:	f7f9 fa69 	bl	80001d0 <memchr>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d038      	beq.n	8006d74 <_svfiprintf_r+0x1d8>
 8006d02:	4b23      	ldr	r3, [pc, #140]	; (8006d90 <_svfiprintf_r+0x1f4>)
 8006d04:	bb1b      	cbnz	r3, 8006d4e <_svfiprintf_r+0x1b2>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	3307      	adds	r3, #7
 8006d0a:	f023 0307 	bic.w	r3, r3, #7
 8006d0e:	3308      	adds	r3, #8
 8006d10:	9303      	str	r3, [sp, #12]
 8006d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d14:	4433      	add	r3, r6
 8006d16:	9309      	str	r3, [sp, #36]	; 0x24
 8006d18:	e767      	b.n	8006bea <_svfiprintf_r+0x4e>
 8006d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d1e:	460c      	mov	r4, r1
 8006d20:	2001      	movs	r0, #1
 8006d22:	e7a5      	b.n	8006c70 <_svfiprintf_r+0xd4>
 8006d24:	2300      	movs	r3, #0
 8006d26:	3401      	adds	r4, #1
 8006d28:	9305      	str	r3, [sp, #20]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f04f 0c0a 	mov.w	ip, #10
 8006d30:	4620      	mov	r0, r4
 8006d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d36:	3a30      	subs	r2, #48	; 0x30
 8006d38:	2a09      	cmp	r2, #9
 8006d3a:	d903      	bls.n	8006d44 <_svfiprintf_r+0x1a8>
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0c5      	beq.n	8006ccc <_svfiprintf_r+0x130>
 8006d40:	9105      	str	r1, [sp, #20]
 8006d42:	e7c3      	b.n	8006ccc <_svfiprintf_r+0x130>
 8006d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d48:	4604      	mov	r4, r0
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e7f0      	b.n	8006d30 <_svfiprintf_r+0x194>
 8006d4e:	ab03      	add	r3, sp, #12
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	462a      	mov	r2, r5
 8006d54:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <_svfiprintf_r+0x1f8>)
 8006d56:	a904      	add	r1, sp, #16
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f3af 8000 	nop.w
 8006d5e:	1c42      	adds	r2, r0, #1
 8006d60:	4606      	mov	r6, r0
 8006d62:	d1d6      	bne.n	8006d12 <_svfiprintf_r+0x176>
 8006d64:	89ab      	ldrh	r3, [r5, #12]
 8006d66:	065b      	lsls	r3, r3, #25
 8006d68:	f53f af2c 	bmi.w	8006bc4 <_svfiprintf_r+0x28>
 8006d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d6e:	b01d      	add	sp, #116	; 0x74
 8006d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d74:	ab03      	add	r3, sp, #12
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	462a      	mov	r2, r5
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <_svfiprintf_r+0x1f8>)
 8006d7c:	a904      	add	r1, sp, #16
 8006d7e:	4638      	mov	r0, r7
 8006d80:	f000 f87a 	bl	8006e78 <_printf_i>
 8006d84:	e7eb      	b.n	8006d5e <_svfiprintf_r+0x1c2>
 8006d86:	bf00      	nop
 8006d88:	0800742c 	.word	0x0800742c
 8006d8c:	08007436 	.word	0x08007436
 8006d90:	00000000 	.word	0x00000000
 8006d94:	08006ae5 	.word	0x08006ae5
 8006d98:	08007432 	.word	0x08007432

08006d9c <_printf_common>:
 8006d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	4616      	mov	r6, r2
 8006da2:	4699      	mov	r9, r3
 8006da4:	688a      	ldr	r2, [r1, #8]
 8006da6:	690b      	ldr	r3, [r1, #16]
 8006da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	bfb8      	it	lt
 8006db0:	4613      	movlt	r3, r2
 8006db2:	6033      	str	r3, [r6, #0]
 8006db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006db8:	4607      	mov	r7, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	b10a      	cbz	r2, 8006dc2 <_printf_common+0x26>
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	6033      	str	r3, [r6, #0]
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	0699      	lsls	r1, r3, #26
 8006dc6:	bf42      	ittt	mi
 8006dc8:	6833      	ldrmi	r3, [r6, #0]
 8006dca:	3302      	addmi	r3, #2
 8006dcc:	6033      	strmi	r3, [r6, #0]
 8006dce:	6825      	ldr	r5, [r4, #0]
 8006dd0:	f015 0506 	ands.w	r5, r5, #6
 8006dd4:	d106      	bne.n	8006de4 <_printf_common+0x48>
 8006dd6:	f104 0a19 	add.w	sl, r4, #25
 8006dda:	68e3      	ldr	r3, [r4, #12]
 8006ddc:	6832      	ldr	r2, [r6, #0]
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	dc26      	bgt.n	8006e32 <_printf_common+0x96>
 8006de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006de8:	1e13      	subs	r3, r2, #0
 8006dea:	6822      	ldr	r2, [r4, #0]
 8006dec:	bf18      	it	ne
 8006dee:	2301      	movne	r3, #1
 8006df0:	0692      	lsls	r2, r2, #26
 8006df2:	d42b      	bmi.n	8006e4c <_printf_common+0xb0>
 8006df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006df8:	4649      	mov	r1, r9
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c0      	blx	r8
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d01e      	beq.n	8006e40 <_printf_common+0xa4>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	68e5      	ldr	r5, [r4, #12]
 8006e06:	6832      	ldr	r2, [r6, #0]
 8006e08:	f003 0306 	and.w	r3, r3, #6
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	bf08      	it	eq
 8006e10:	1aad      	subeq	r5, r5, r2
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	6922      	ldr	r2, [r4, #16]
 8006e16:	bf0c      	ite	eq
 8006e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e1c:	2500      	movne	r5, #0
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bfc4      	itt	gt
 8006e22:	1a9b      	subgt	r3, r3, r2
 8006e24:	18ed      	addgt	r5, r5, r3
 8006e26:	2600      	movs	r6, #0
 8006e28:	341a      	adds	r4, #26
 8006e2a:	42b5      	cmp	r5, r6
 8006e2c:	d11a      	bne.n	8006e64 <_printf_common+0xc8>
 8006e2e:	2000      	movs	r0, #0
 8006e30:	e008      	b.n	8006e44 <_printf_common+0xa8>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4652      	mov	r2, sl
 8006e36:	4649      	mov	r1, r9
 8006e38:	4638      	mov	r0, r7
 8006e3a:	47c0      	blx	r8
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d103      	bne.n	8006e48 <_printf_common+0xac>
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e48:	3501      	adds	r5, #1
 8006e4a:	e7c6      	b.n	8006dda <_printf_common+0x3e>
 8006e4c:	18e1      	adds	r1, r4, r3
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	2030      	movs	r0, #48	; 0x30
 8006e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e56:	4422      	add	r2, r4
 8006e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e60:	3302      	adds	r3, #2
 8006e62:	e7c7      	b.n	8006df4 <_printf_common+0x58>
 8006e64:	2301      	movs	r3, #1
 8006e66:	4622      	mov	r2, r4
 8006e68:	4649      	mov	r1, r9
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	47c0      	blx	r8
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d0e6      	beq.n	8006e40 <_printf_common+0xa4>
 8006e72:	3601      	adds	r6, #1
 8006e74:	e7d9      	b.n	8006e2a <_printf_common+0x8e>
	...

08006e78 <_printf_i>:
 8006e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	4691      	mov	r9, r2
 8006e80:	7e27      	ldrb	r7, [r4, #24]
 8006e82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e84:	2f78      	cmp	r7, #120	; 0x78
 8006e86:	4680      	mov	r8, r0
 8006e88:	469a      	mov	sl, r3
 8006e8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e8e:	d807      	bhi.n	8006ea0 <_printf_i+0x28>
 8006e90:	2f62      	cmp	r7, #98	; 0x62
 8006e92:	d80a      	bhi.n	8006eaa <_printf_i+0x32>
 8006e94:	2f00      	cmp	r7, #0
 8006e96:	f000 80d8 	beq.w	800704a <_printf_i+0x1d2>
 8006e9a:	2f58      	cmp	r7, #88	; 0x58
 8006e9c:	f000 80a3 	beq.w	8006fe6 <_printf_i+0x16e>
 8006ea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ea8:	e03a      	b.n	8006f20 <_printf_i+0xa8>
 8006eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eae:	2b15      	cmp	r3, #21
 8006eb0:	d8f6      	bhi.n	8006ea0 <_printf_i+0x28>
 8006eb2:	a001      	add	r0, pc, #4	; (adr r0, 8006eb8 <_printf_i+0x40>)
 8006eb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006eb8:	08006f11 	.word	0x08006f11
 8006ebc:	08006f25 	.word	0x08006f25
 8006ec0:	08006ea1 	.word	0x08006ea1
 8006ec4:	08006ea1 	.word	0x08006ea1
 8006ec8:	08006ea1 	.word	0x08006ea1
 8006ecc:	08006ea1 	.word	0x08006ea1
 8006ed0:	08006f25 	.word	0x08006f25
 8006ed4:	08006ea1 	.word	0x08006ea1
 8006ed8:	08006ea1 	.word	0x08006ea1
 8006edc:	08006ea1 	.word	0x08006ea1
 8006ee0:	08006ea1 	.word	0x08006ea1
 8006ee4:	08007031 	.word	0x08007031
 8006ee8:	08006f55 	.word	0x08006f55
 8006eec:	08007013 	.word	0x08007013
 8006ef0:	08006ea1 	.word	0x08006ea1
 8006ef4:	08006ea1 	.word	0x08006ea1
 8006ef8:	08007053 	.word	0x08007053
 8006efc:	08006ea1 	.word	0x08006ea1
 8006f00:	08006f55 	.word	0x08006f55
 8006f04:	08006ea1 	.word	0x08006ea1
 8006f08:	08006ea1 	.word	0x08006ea1
 8006f0c:	0800701b 	.word	0x0800701b
 8006f10:	680b      	ldr	r3, [r1, #0]
 8006f12:	1d1a      	adds	r2, r3, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	600a      	str	r2, [r1, #0]
 8006f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0a3      	b.n	800706c <_printf_i+0x1f4>
 8006f24:	6825      	ldr	r5, [r4, #0]
 8006f26:	6808      	ldr	r0, [r1, #0]
 8006f28:	062e      	lsls	r6, r5, #24
 8006f2a:	f100 0304 	add.w	r3, r0, #4
 8006f2e:	d50a      	bpl.n	8006f46 <_printf_i+0xce>
 8006f30:	6805      	ldr	r5, [r0, #0]
 8006f32:	600b      	str	r3, [r1, #0]
 8006f34:	2d00      	cmp	r5, #0
 8006f36:	da03      	bge.n	8006f40 <_printf_i+0xc8>
 8006f38:	232d      	movs	r3, #45	; 0x2d
 8006f3a:	426d      	negs	r5, r5
 8006f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f40:	485e      	ldr	r0, [pc, #376]	; (80070bc <_printf_i+0x244>)
 8006f42:	230a      	movs	r3, #10
 8006f44:	e019      	b.n	8006f7a <_printf_i+0x102>
 8006f46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f4a:	6805      	ldr	r5, [r0, #0]
 8006f4c:	600b      	str	r3, [r1, #0]
 8006f4e:	bf18      	it	ne
 8006f50:	b22d      	sxthne	r5, r5
 8006f52:	e7ef      	b.n	8006f34 <_printf_i+0xbc>
 8006f54:	680b      	ldr	r3, [r1, #0]
 8006f56:	6825      	ldr	r5, [r4, #0]
 8006f58:	1d18      	adds	r0, r3, #4
 8006f5a:	6008      	str	r0, [r1, #0]
 8006f5c:	0628      	lsls	r0, r5, #24
 8006f5e:	d501      	bpl.n	8006f64 <_printf_i+0xec>
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	e002      	b.n	8006f6a <_printf_i+0xf2>
 8006f64:	0669      	lsls	r1, r5, #25
 8006f66:	d5fb      	bpl.n	8006f60 <_printf_i+0xe8>
 8006f68:	881d      	ldrh	r5, [r3, #0]
 8006f6a:	4854      	ldr	r0, [pc, #336]	; (80070bc <_printf_i+0x244>)
 8006f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8006f6e:	bf0c      	ite	eq
 8006f70:	2308      	moveq	r3, #8
 8006f72:	230a      	movne	r3, #10
 8006f74:	2100      	movs	r1, #0
 8006f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f7a:	6866      	ldr	r6, [r4, #4]
 8006f7c:	60a6      	str	r6, [r4, #8]
 8006f7e:	2e00      	cmp	r6, #0
 8006f80:	bfa2      	ittt	ge
 8006f82:	6821      	ldrge	r1, [r4, #0]
 8006f84:	f021 0104 	bicge.w	r1, r1, #4
 8006f88:	6021      	strge	r1, [r4, #0]
 8006f8a:	b90d      	cbnz	r5, 8006f90 <_printf_i+0x118>
 8006f8c:	2e00      	cmp	r6, #0
 8006f8e:	d04d      	beq.n	800702c <_printf_i+0x1b4>
 8006f90:	4616      	mov	r6, r2
 8006f92:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f96:	fb03 5711 	mls	r7, r3, r1, r5
 8006f9a:	5dc7      	ldrb	r7, [r0, r7]
 8006f9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fa0:	462f      	mov	r7, r5
 8006fa2:	42bb      	cmp	r3, r7
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	d9f4      	bls.n	8006f92 <_printf_i+0x11a>
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d10b      	bne.n	8006fc4 <_printf_i+0x14c>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07df      	lsls	r7, r3, #31
 8006fb0:	d508      	bpl.n	8006fc4 <_printf_i+0x14c>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	6861      	ldr	r1, [r4, #4]
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	bfde      	ittt	le
 8006fba:	2330      	movle	r3, #48	; 0x30
 8006fbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fc0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006fc4:	1b92      	subs	r2, r2, r6
 8006fc6:	6122      	str	r2, [r4, #16]
 8006fc8:	f8cd a000 	str.w	sl, [sp]
 8006fcc:	464b      	mov	r3, r9
 8006fce:	aa03      	add	r2, sp, #12
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f7ff fee2 	bl	8006d9c <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d14c      	bne.n	8007076 <_printf_i+0x1fe>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe0:	b004      	add	sp, #16
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	4835      	ldr	r0, [pc, #212]	; (80070bc <_printf_i+0x244>)
 8006fe8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	680e      	ldr	r6, [r1, #0]
 8006ff0:	061f      	lsls	r7, r3, #24
 8006ff2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ff6:	600e      	str	r6, [r1, #0]
 8006ff8:	d514      	bpl.n	8007024 <_printf_i+0x1ac>
 8006ffa:	07d9      	lsls	r1, r3, #31
 8006ffc:	bf44      	itt	mi
 8006ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8007002:	6023      	strmi	r3, [r4, #0]
 8007004:	b91d      	cbnz	r5, 800700e <_printf_i+0x196>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	f023 0320 	bic.w	r3, r3, #32
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	2310      	movs	r3, #16
 8007010:	e7b0      	b.n	8006f74 <_printf_i+0xfc>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	f043 0320 	orr.w	r3, r3, #32
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	2378      	movs	r3, #120	; 0x78
 800701c:	4828      	ldr	r0, [pc, #160]	; (80070c0 <_printf_i+0x248>)
 800701e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007022:	e7e3      	b.n	8006fec <_printf_i+0x174>
 8007024:	065e      	lsls	r6, r3, #25
 8007026:	bf48      	it	mi
 8007028:	b2ad      	uxthmi	r5, r5
 800702a:	e7e6      	b.n	8006ffa <_printf_i+0x182>
 800702c:	4616      	mov	r6, r2
 800702e:	e7bb      	b.n	8006fa8 <_printf_i+0x130>
 8007030:	680b      	ldr	r3, [r1, #0]
 8007032:	6826      	ldr	r6, [r4, #0]
 8007034:	6960      	ldr	r0, [r4, #20]
 8007036:	1d1d      	adds	r5, r3, #4
 8007038:	600d      	str	r5, [r1, #0]
 800703a:	0635      	lsls	r5, r6, #24
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	d501      	bpl.n	8007044 <_printf_i+0x1cc>
 8007040:	6018      	str	r0, [r3, #0]
 8007042:	e002      	b.n	800704a <_printf_i+0x1d2>
 8007044:	0671      	lsls	r1, r6, #25
 8007046:	d5fb      	bpl.n	8007040 <_printf_i+0x1c8>
 8007048:	8018      	strh	r0, [r3, #0]
 800704a:	2300      	movs	r3, #0
 800704c:	6123      	str	r3, [r4, #16]
 800704e:	4616      	mov	r6, r2
 8007050:	e7ba      	b.n	8006fc8 <_printf_i+0x150>
 8007052:	680b      	ldr	r3, [r1, #0]
 8007054:	1d1a      	adds	r2, r3, #4
 8007056:	600a      	str	r2, [r1, #0]
 8007058:	681e      	ldr	r6, [r3, #0]
 800705a:	6862      	ldr	r2, [r4, #4]
 800705c:	2100      	movs	r1, #0
 800705e:	4630      	mov	r0, r6
 8007060:	f7f9 f8b6 	bl	80001d0 <memchr>
 8007064:	b108      	cbz	r0, 800706a <_printf_i+0x1f2>
 8007066:	1b80      	subs	r0, r0, r6
 8007068:	6060      	str	r0, [r4, #4]
 800706a:	6863      	ldr	r3, [r4, #4]
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	2300      	movs	r3, #0
 8007070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007074:	e7a8      	b.n	8006fc8 <_printf_i+0x150>
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	4632      	mov	r2, r6
 800707a:	4649      	mov	r1, r9
 800707c:	4640      	mov	r0, r8
 800707e:	47d0      	blx	sl
 8007080:	3001      	adds	r0, #1
 8007082:	d0ab      	beq.n	8006fdc <_printf_i+0x164>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	079b      	lsls	r3, r3, #30
 8007088:	d413      	bmi.n	80070b2 <_printf_i+0x23a>
 800708a:	68e0      	ldr	r0, [r4, #12]
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	4298      	cmp	r0, r3
 8007090:	bfb8      	it	lt
 8007092:	4618      	movlt	r0, r3
 8007094:	e7a4      	b.n	8006fe0 <_printf_i+0x168>
 8007096:	2301      	movs	r3, #1
 8007098:	4632      	mov	r2, r6
 800709a:	4649      	mov	r1, r9
 800709c:	4640      	mov	r0, r8
 800709e:	47d0      	blx	sl
 80070a0:	3001      	adds	r0, #1
 80070a2:	d09b      	beq.n	8006fdc <_printf_i+0x164>
 80070a4:	3501      	adds	r5, #1
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	9903      	ldr	r1, [sp, #12]
 80070aa:	1a5b      	subs	r3, r3, r1
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dcf2      	bgt.n	8007096 <_printf_i+0x21e>
 80070b0:	e7eb      	b.n	800708a <_printf_i+0x212>
 80070b2:	2500      	movs	r5, #0
 80070b4:	f104 0619 	add.w	r6, r4, #25
 80070b8:	e7f5      	b.n	80070a6 <_printf_i+0x22e>
 80070ba:	bf00      	nop
 80070bc:	0800743d 	.word	0x0800743d
 80070c0:	0800744e 	.word	0x0800744e

080070c4 <memmove>:
 80070c4:	4288      	cmp	r0, r1
 80070c6:	b510      	push	{r4, lr}
 80070c8:	eb01 0402 	add.w	r4, r1, r2
 80070cc:	d902      	bls.n	80070d4 <memmove+0x10>
 80070ce:	4284      	cmp	r4, r0
 80070d0:	4623      	mov	r3, r4
 80070d2:	d807      	bhi.n	80070e4 <memmove+0x20>
 80070d4:	1e43      	subs	r3, r0, #1
 80070d6:	42a1      	cmp	r1, r4
 80070d8:	d008      	beq.n	80070ec <memmove+0x28>
 80070da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070e2:	e7f8      	b.n	80070d6 <memmove+0x12>
 80070e4:	4402      	add	r2, r0
 80070e6:	4601      	mov	r1, r0
 80070e8:	428a      	cmp	r2, r1
 80070ea:	d100      	bne.n	80070ee <memmove+0x2a>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f6:	e7f7      	b.n	80070e8 <memmove+0x24>

080070f8 <_free_r>:
 80070f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070fa:	2900      	cmp	r1, #0
 80070fc:	d048      	beq.n	8007190 <_free_r+0x98>
 80070fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007102:	9001      	str	r0, [sp, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f1a1 0404 	sub.w	r4, r1, #4
 800710a:	bfb8      	it	lt
 800710c:	18e4      	addlt	r4, r4, r3
 800710e:	f000 f8d3 	bl	80072b8 <__malloc_lock>
 8007112:	4a20      	ldr	r2, [pc, #128]	; (8007194 <_free_r+0x9c>)
 8007114:	9801      	ldr	r0, [sp, #4]
 8007116:	6813      	ldr	r3, [r2, #0]
 8007118:	4615      	mov	r5, r2
 800711a:	b933      	cbnz	r3, 800712a <_free_r+0x32>
 800711c:	6063      	str	r3, [r4, #4]
 800711e:	6014      	str	r4, [r2, #0]
 8007120:	b003      	add	sp, #12
 8007122:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007126:	f000 b8cd 	b.w	80072c4 <__malloc_unlock>
 800712a:	42a3      	cmp	r3, r4
 800712c:	d90b      	bls.n	8007146 <_free_r+0x4e>
 800712e:	6821      	ldr	r1, [r4, #0]
 8007130:	1862      	adds	r2, r4, r1
 8007132:	4293      	cmp	r3, r2
 8007134:	bf04      	itt	eq
 8007136:	681a      	ldreq	r2, [r3, #0]
 8007138:	685b      	ldreq	r3, [r3, #4]
 800713a:	6063      	str	r3, [r4, #4]
 800713c:	bf04      	itt	eq
 800713e:	1852      	addeq	r2, r2, r1
 8007140:	6022      	streq	r2, [r4, #0]
 8007142:	602c      	str	r4, [r5, #0]
 8007144:	e7ec      	b.n	8007120 <_free_r+0x28>
 8007146:	461a      	mov	r2, r3
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	b10b      	cbz	r3, 8007150 <_free_r+0x58>
 800714c:	42a3      	cmp	r3, r4
 800714e:	d9fa      	bls.n	8007146 <_free_r+0x4e>
 8007150:	6811      	ldr	r1, [r2, #0]
 8007152:	1855      	adds	r5, r2, r1
 8007154:	42a5      	cmp	r5, r4
 8007156:	d10b      	bne.n	8007170 <_free_r+0x78>
 8007158:	6824      	ldr	r4, [r4, #0]
 800715a:	4421      	add	r1, r4
 800715c:	1854      	adds	r4, r2, r1
 800715e:	42a3      	cmp	r3, r4
 8007160:	6011      	str	r1, [r2, #0]
 8007162:	d1dd      	bne.n	8007120 <_free_r+0x28>
 8007164:	681c      	ldr	r4, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	6053      	str	r3, [r2, #4]
 800716a:	4421      	add	r1, r4
 800716c:	6011      	str	r1, [r2, #0]
 800716e:	e7d7      	b.n	8007120 <_free_r+0x28>
 8007170:	d902      	bls.n	8007178 <_free_r+0x80>
 8007172:	230c      	movs	r3, #12
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	e7d3      	b.n	8007120 <_free_r+0x28>
 8007178:	6825      	ldr	r5, [r4, #0]
 800717a:	1961      	adds	r1, r4, r5
 800717c:	428b      	cmp	r3, r1
 800717e:	bf04      	itt	eq
 8007180:	6819      	ldreq	r1, [r3, #0]
 8007182:	685b      	ldreq	r3, [r3, #4]
 8007184:	6063      	str	r3, [r4, #4]
 8007186:	bf04      	itt	eq
 8007188:	1949      	addeq	r1, r1, r5
 800718a:	6021      	streq	r1, [r4, #0]
 800718c:	6054      	str	r4, [r2, #4]
 800718e:	e7c7      	b.n	8007120 <_free_r+0x28>
 8007190:	b003      	add	sp, #12
 8007192:	bd30      	pop	{r4, r5, pc}
 8007194:	20001c84 	.word	0x20001c84

08007198 <_malloc_r>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	1ccd      	adds	r5, r1, #3
 800719c:	f025 0503 	bic.w	r5, r5, #3
 80071a0:	3508      	adds	r5, #8
 80071a2:	2d0c      	cmp	r5, #12
 80071a4:	bf38      	it	cc
 80071a6:	250c      	movcc	r5, #12
 80071a8:	2d00      	cmp	r5, #0
 80071aa:	4606      	mov	r6, r0
 80071ac:	db01      	blt.n	80071b2 <_malloc_r+0x1a>
 80071ae:	42a9      	cmp	r1, r5
 80071b0:	d903      	bls.n	80071ba <_malloc_r+0x22>
 80071b2:	230c      	movs	r3, #12
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	2000      	movs	r0, #0
 80071b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ba:	f000 f87d 	bl	80072b8 <__malloc_lock>
 80071be:	4921      	ldr	r1, [pc, #132]	; (8007244 <_malloc_r+0xac>)
 80071c0:	680a      	ldr	r2, [r1, #0]
 80071c2:	4614      	mov	r4, r2
 80071c4:	b99c      	cbnz	r4, 80071ee <_malloc_r+0x56>
 80071c6:	4f20      	ldr	r7, [pc, #128]	; (8007248 <_malloc_r+0xb0>)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	b923      	cbnz	r3, 80071d6 <_malloc_r+0x3e>
 80071cc:	4621      	mov	r1, r4
 80071ce:	4630      	mov	r0, r6
 80071d0:	f000 f862 	bl	8007298 <_sbrk_r>
 80071d4:	6038      	str	r0, [r7, #0]
 80071d6:	4629      	mov	r1, r5
 80071d8:	4630      	mov	r0, r6
 80071da:	f000 f85d 	bl	8007298 <_sbrk_r>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d123      	bne.n	800722a <_malloc_r+0x92>
 80071e2:	230c      	movs	r3, #12
 80071e4:	6033      	str	r3, [r6, #0]
 80071e6:	4630      	mov	r0, r6
 80071e8:	f000 f86c 	bl	80072c4 <__malloc_unlock>
 80071ec:	e7e3      	b.n	80071b6 <_malloc_r+0x1e>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	1b5b      	subs	r3, r3, r5
 80071f2:	d417      	bmi.n	8007224 <_malloc_r+0x8c>
 80071f4:	2b0b      	cmp	r3, #11
 80071f6:	d903      	bls.n	8007200 <_malloc_r+0x68>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	441c      	add	r4, r3
 80071fc:	6025      	str	r5, [r4, #0]
 80071fe:	e004      	b.n	800720a <_malloc_r+0x72>
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	42a2      	cmp	r2, r4
 8007204:	bf0c      	ite	eq
 8007206:	600b      	streq	r3, [r1, #0]
 8007208:	6053      	strne	r3, [r2, #4]
 800720a:	4630      	mov	r0, r6
 800720c:	f000 f85a 	bl	80072c4 <__malloc_unlock>
 8007210:	f104 000b 	add.w	r0, r4, #11
 8007214:	1d23      	adds	r3, r4, #4
 8007216:	f020 0007 	bic.w	r0, r0, #7
 800721a:	1ac2      	subs	r2, r0, r3
 800721c:	d0cc      	beq.n	80071b8 <_malloc_r+0x20>
 800721e:	1a1b      	subs	r3, r3, r0
 8007220:	50a3      	str	r3, [r4, r2]
 8007222:	e7c9      	b.n	80071b8 <_malloc_r+0x20>
 8007224:	4622      	mov	r2, r4
 8007226:	6864      	ldr	r4, [r4, #4]
 8007228:	e7cc      	b.n	80071c4 <_malloc_r+0x2c>
 800722a:	1cc4      	adds	r4, r0, #3
 800722c:	f024 0403 	bic.w	r4, r4, #3
 8007230:	42a0      	cmp	r0, r4
 8007232:	d0e3      	beq.n	80071fc <_malloc_r+0x64>
 8007234:	1a21      	subs	r1, r4, r0
 8007236:	4630      	mov	r0, r6
 8007238:	f000 f82e 	bl	8007298 <_sbrk_r>
 800723c:	3001      	adds	r0, #1
 800723e:	d1dd      	bne.n	80071fc <_malloc_r+0x64>
 8007240:	e7cf      	b.n	80071e2 <_malloc_r+0x4a>
 8007242:	bf00      	nop
 8007244:	20001c84 	.word	0x20001c84
 8007248:	20001c88 	.word	0x20001c88

0800724c <_realloc_r>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	4607      	mov	r7, r0
 8007250:	4614      	mov	r4, r2
 8007252:	460e      	mov	r6, r1
 8007254:	b921      	cbnz	r1, 8007260 <_realloc_r+0x14>
 8007256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800725a:	4611      	mov	r1, r2
 800725c:	f7ff bf9c 	b.w	8007198 <_malloc_r>
 8007260:	b922      	cbnz	r2, 800726c <_realloc_r+0x20>
 8007262:	f7ff ff49 	bl	80070f8 <_free_r>
 8007266:	4625      	mov	r5, r4
 8007268:	4628      	mov	r0, r5
 800726a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800726c:	f000 f830 	bl	80072d0 <_malloc_usable_size_r>
 8007270:	42a0      	cmp	r0, r4
 8007272:	d20f      	bcs.n	8007294 <_realloc_r+0x48>
 8007274:	4621      	mov	r1, r4
 8007276:	4638      	mov	r0, r7
 8007278:	f7ff ff8e 	bl	8007198 <_malloc_r>
 800727c:	4605      	mov	r5, r0
 800727e:	2800      	cmp	r0, #0
 8007280:	d0f2      	beq.n	8007268 <_realloc_r+0x1c>
 8007282:	4631      	mov	r1, r6
 8007284:	4622      	mov	r2, r4
 8007286:	f7ff fbe3 	bl	8006a50 <memcpy>
 800728a:	4631      	mov	r1, r6
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff ff33 	bl	80070f8 <_free_r>
 8007292:	e7e9      	b.n	8007268 <_realloc_r+0x1c>
 8007294:	4635      	mov	r5, r6
 8007296:	e7e7      	b.n	8007268 <_realloc_r+0x1c>

08007298 <_sbrk_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d06      	ldr	r5, [pc, #24]	; (80072b4 <_sbrk_r+0x1c>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	f7f9 fd7e 	bl	8000da4 <_sbrk>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_sbrk_r+0x1a>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_sbrk_r+0x1a>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20001e78 	.word	0x20001e78

080072b8 <__malloc_lock>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__malloc_lock+0x8>)
 80072ba:	f000 b811 	b.w	80072e0 <__retarget_lock_acquire_recursive>
 80072be:	bf00      	nop
 80072c0:	20001e80 	.word	0x20001e80

080072c4 <__malloc_unlock>:
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <__malloc_unlock+0x8>)
 80072c6:	f000 b80c 	b.w	80072e2 <__retarget_lock_release_recursive>
 80072ca:	bf00      	nop
 80072cc:	20001e80 	.word	0x20001e80

080072d0 <_malloc_usable_size_r>:
 80072d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d4:	1f18      	subs	r0, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfbc      	itt	lt
 80072da:	580b      	ldrlt	r3, [r1, r0]
 80072dc:	18c0      	addlt	r0, r0, r3
 80072de:	4770      	bx	lr

080072e0 <__retarget_lock_acquire_recursive>:
 80072e0:	4770      	bx	lr

080072e2 <__retarget_lock_release_recursive>:
 80072e2:	4770      	bx	lr

080072e4 <_init>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr

080072f0 <_fini>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr
